{"ast":null,"code":"import _defineProperty from \"/Users/geekh04/workspace/BCP/transactionMDP-client-side/node_modules/@babel/runtime/helpers/esm/defineProperty\";\nimport _classCallCheck from \"/Users/geekh04/workspace/BCP/transactionMDP-client-side/node_modules/@babel/runtime/helpers/esm/classCallCheck\";\nimport _createClass from \"/Users/geekh04/workspace/BCP/transactionMDP-client-side/node_modules/@babel/runtime/helpers/esm/createClass\";\nimport _possibleConstructorReturn from \"/Users/geekh04/workspace/BCP/transactionMDP-client-side/node_modules/@babel/runtime/helpers/esm/possibleConstructorReturn\";\nimport _getPrototypeOf from \"/Users/geekh04/workspace/BCP/transactionMDP-client-side/node_modules/@babel/runtime/helpers/esm/getPrototypeOf\";\nimport _inherits from \"/Users/geekh04/workspace/BCP/transactionMDP-client-side/node_modules/@babel/runtime/helpers/esm/inherits\";\nimport _assertThisInitialized from \"/Users/geekh04/workspace/BCP/transactionMDP-client-side/node_modules/@babel/runtime/helpers/esm/assertThisInitialized\";\nvar _jsxFileName = \"/Users/geekh04/workspace/BCP/transactionMDP-client-side/src/views/User/Transfer/TransferForm.jsx\";\nimport React from \"react\"; // API\n\nimport { getAccountCurrency, doTransfer, getCommissionData } from '../../../util/APIUtils'; // react plugin used to create datetimepicker\n\nimport ReactDatetime from \"react-datetime\"; // reactstrap components\n\nimport { Card, CardHeader, CardBody, InputGroupAddon, InputGroupText, InputGroup, Row, Col, FormGroup, Input, Label, Button } from \"reactstrap\"; // Redux components\n\nimport { connect } from \"react-redux\";\nimport { getCurrentUser } from \"../../../redux/actions\"; // Sweet alert components\n\nimport Swal from \"sweetalert2\";\nimport withReactContent from \"sweetalert2-react-content\";\nvar MySwal = withReactContent(Swal);\n/** La page du virement\n * Cette page présente un formulaire qui contient l'ensemble des informations demandées pour effectuer un virement\n * */\n\nvar TransferForm =\n/*#__PURE__*/\nfunction (_React$Component) {\n  _inherits(TransferForm, _React$Component);\n\n  // Constructeur\n  function TransferForm(props) {\n    var _this;\n\n    _classCallCheck(this, TransferForm);\n\n    _this = _possibleConstructorReturn(this, _getPrototypeOf(TransferForm).call(this, props));\n\n    _this.loadAccountCurrency = function (event) {\n      var number = event.target.value;\n      var id = event.target.id;\n\n      if (number.length >= 4) {\n        var idCurrency = id + \"Currency\";\n        var promise;\n        promise = getAccountCurrency(number);\n\n        if (!promise) {\n          return;\n        }\n\n        _this.setState({\n          isLoadingCurrency: true\n        }); // Initialisation de l'alert\n\n\n        var Toast = MySwal.mixin({\n          toast: true,\n          position: 'center',\n          showConfirmButton: false,\n          timer: 2000\n        });\n        promise.then(function (response) {\n          // récupérer la devise\n          if (response.code === \"200\") {\n            var _this$setState;\n\n            _this.setState((_this$setState = {}, _defineProperty(_this$setState, idCurrency, response.libelle), _defineProperty(_this$setState, \"isLoadingCurrency\", false), _this$setState));\n          } else {\n            // afficher un message d’erreur\n            Toast.fire({\n              type: 'error',\n              title: response.libelle + '. Vous pouvez pas  effectuer cette opération!'\n            });\n          }\n        }).catch(function (error) {\n          alert(error);\n\n          _this.setState({\n            isLoadingCurrency: false\n          });\n        });\n      }\n    };\n\n    _this.loadCommissionData = function (value) {\n      //event.preventDefault();\n      if (value === \"\" || value === 0) {\n        return;\n      }\n\n      var commissionData = {\n        accountN1: _this.state.principalAccount,\n        accountN2: _this.state.beneficiaryAccount,\n        amount: value\n      };\n      var promise;\n      promise = getCommissionData(commissionData);\n\n      if (!promise) {\n        return;\n      }\n\n      _this.setState({\n        isLoadingCurrency: true\n      });\n\n      promise.then(function (response) {\n        // récupérer la commission\n        _this.setState({\n          applyedRate: response.commissionRate,\n          commissionAmount: response.commissionAmount,\n          commissionTVA: response.tvaAmount,\n          isLoadingCurrency: false\n        });\n\n        _this.getTotalAmount(_this.state.applyCommission);\n      }).catch(function (error) {\n        _this.setState({\n          isLoadingCurrency: false\n        });\n      });\n    };\n\n    _this.getTotalAmount = function (applyCommission) {\n      if (applyCommission) {\n        _this.setState({\n          totalAmount: parseFloat(_this.state.transactionAmount) + _this.state.commissionAmount + _this.state.commissionTVA\n        });\n      } else {\n        _this.setState({\n          totalAmount: _this.state.transactionAmount\n        });\n      }\n    };\n\n    _this.state = {\n      focused: \"\",\n      transactionType: \"\",\n      // Type de transaction\n      principalAccount: \"\",\n      // Compte donneur d’ordre\n      principalAccountCurrency: \"NAN\",\n      // Devise Compte donneur ordre\n      beneficiaryAccount: \"\",\n      // Compte bénéficiaire\n      beneficiaryAccountCurrency: \"NaN\",\n      // Devise Compte bénéficiaire\n      transactionAmount: 0,\n      // Montant de l’opération\n      transactionCurrency: \"NaN\",\n      // Devise de l’opération: doit être égale à la devise du compte à débiter ou celle du compte à créditer\n      transferReason: \"\",\n      // Motif de virement\n      executionDate: new Date(),\n      // Date exécution : par défaut c'est la date courante\n\n      /*DBValueDate: \"\",                // Date valeur DB: Par défaut = J-1 (paramétrable par catégorie de cpt)\n      CRValueDate: \"\",*/\n      // Date valeur CR: Par défaut = J+1 (paramétrable par catégorie de cpt)\n      //commissionCode: 0,              // Code Commission appliquée: Non modifiable\n      applyedRate: 0,\n      // taux appliqué: Non modifiable\n      commissionAmount: 0,\n      // Montant commission: Non modifiable\n      applyCommission: true,\n      // Appliquer commission: OUI/NON\n      commissionTVA: 0,\n      // TVA sur commission: Calculé automatiquement par un taux paramétrable\n      chargeType: \"\",\n      // Type de charge : = ‘OUR’ par défaut La charge est à appliquer sur le compte à débiter\n      totalAmount: 0,\n      // Le montant total à débiter\n\n      /* Saisie uniquement pour les  transferts en devise */\n      transferNature: \"\",\n      // Nature de transfert : Saisie uniquement pour MAD to MAC ou MAD to Autre devise\n      authorizationNumber: \"\",\n      // Numéro d’autorisation: Saisie uniquement pour MAD to MAC ou MAD to Autre devise\n      authorizationValidity: \"\",\n      // Validité de l’autorisation: Saisie uniquement pour MAD to MAC ou MAD to Autre devise\n      exchangeRate: \"\",\n      // Cours de change: Non modifiable\n      tradingTicket: \"\",\n      // La référence du ticket de négociation: Saisie uniquement pour les  clients de la salle de marché ou pour les transactions de très grand montant\n      largeAmount: 4000,\n      // *****************************************\n      account: [],\n      isLoadingCurrency: true\n    };\n    _this.handleChange = _this.handleChange.bind(_assertThisInitialized(_assertThisInitialized(_this)));\n    _this.handleSubmit = _this.handleSubmit.bind(_assertThisInitialized(_assertThisInitialized(_this)));\n    _this.handleChangeCheckbox = _this.handleChangeCheckbox.bind(_assertThisInitialized(_assertThisInitialized(_this)));\n    _this.loadCommissionData = _this.loadCommissionData.bind(_assertThisInitialized(_assertThisInitialized(_this)));\n    _this.loadAccountCurrency = _this.loadAccountCurrency.bind(_assertThisInitialized(_assertThisInitialized(_this)));\n    _this.getTotalAmount = _this.getTotalAmount.bind(_assertThisInitialized(_assertThisInitialized(_this)));\n    return _this;\n  }\n\n  _createClass(TransferForm, [{\n    key: \"componentDidMount\",\n    value: function componentDidMount() {\n      this.props.getCurrentUser();\n    } // Cette fonction permet d'affecter les infos saisies à la variable convenable\n\n  }, {\n    key: \"handleChange\",\n    value: function handleChange(event) {\n      var target = event.target;\n      var value = target.value;\n      var id = target.id;\n      this.setState(_defineProperty({}, id, value));\n    } // Cette fonction se déclenche lorsque l'utilisateur clique sur le checkbox \"appliquer commission\"\n    // Elle permet d'affecter une valeur à la variable \"applyCommission\" avec la mise à jour du montant total\n    // - true : pour appliquer la commission\n    // - false: sinon\n\n  }, {\n    key: \"handleChangeCheckbox\",\n    value: function handleChangeCheckbox(event) {\n      var target = event.target;\n      var value = target.checked;\n      var id = target.id;\n      this.setState(_defineProperty({}, id, value)); // Appler a la fonction getTotalAmount pour la mise à jour du montant total\n\n      this.getTotalAmount(target.checked);\n    } // Cette fonction se déclenche lorsque l'utilisateur clique sur \"virer\"\n    // Elle permet d'envoyer les données de l'opération au serveur\n\n  }, {\n    key: \"handleSubmit\",\n    value: function handleSubmit(event) {\n      var _this2 = this;\n\n      event.preventDefault(); // Récupérer les données du virement\n\n      var transferData = {\n        // affecter la valeur de type de transaction selon le role d'utilisateur\n        transactionType: this.props.currentUser.role === \"ROLE_AGENT\" ? \"IEA\" : this.props.currentUser.role === \"ROLE_CTN\" ? \"IAC\" : this.props.currentUser.role === \"ROLE_CTRL\" ? \"ctrl\" : \"\",\n        principalAccount: this.state.principalAccount,\n        //principalAccountCurrency: this.state.principalAccountCurrency,*************************************\n        beneficiaryAccount: this.state.beneficiaryAccount,\n        //beneficiaryAccountCurrency: this.state.beneficiaryAccountCurrency,*************************************\n        transactionAmount: this.state.transactionAmount,\n        transactionCurrency: this.state.transactionCurrency,\n        transferReason: this.state.transferReason,\n        executionDate: this.state.executionDate,\n        transferNature: this.state.transferNature,\n        authorizationNumber: this.state.authorizationNumber,\n        //authorizationValidity: this.state.authorizationValidity,\n        //commissionCode: this.state.commissionCode,\n        commissionRate: this.state.applyedRate,\n        commissionAmount: this.state.commissionAmount,\n        applyCommission: this.state.applyCommission,\n        commissionTVA: this.state.commissionTVA,\n        chargeType: this.state.chargeType,\n        isExchange: this.state.principalAccountCurrency === \"MAD\" && this.state.beneficiaryAccountCurrency !== \"MAD\" //exchangeRate: this.state.exchangeRate,\n        //tradingTicket: this.state.tradingTicket,\n        //totalAmount: this.state.totalAmount\n\n      }; // Envoyer les données de l'opération au serveur\n\n      doTransfer(transferData).then(function (response) {\n        // affichee un message de succès\n\n        /*return */\n        MySwal.fire({\n          type: 'success',\n          title: 'Virement effectué avec succès',\n          showConfirmButton: false,\n          timer: 1500\n        }); // redirection vers un tableau de transactions.\n\n        _this2.props.history.push(\"/user/lsttransfers\");\n      }).catch(function (error) {\n        if (error.status === 401) {\n          // affichee un message d’erreur\n          MySwal.fire({\n            type: 'error',\n            title: 'Vous avez été déconnecté. Veuillez vous connecter pour éffectuer cette opération.',\n            showConfirmButton: false,\n            timer: 1500\n          }); // redirection vers la page d'authentification.\n\n          _this2.props.history.push('/login');\n        } else {\n          // affichee un message d’erreur\n          MySwal.fire({\n            type: 'warning',\n            title: error.message || 'Pardon! Quelque chose s\\'est mal passé. Veuillez réessayer!',\n            showConfirmButton: false,\n            timer: 1500\n          });\n        }\n      });\n    } // Cette fonction se déclenche lorsque l'utilisateur saisit le numero d'un compte\n    // Elle permet de récupérer le devise du compte sinon elle retourne un message d'erreur\n\n  }, {\n    key: \"handleChangeAmount\",\n    // Cette fonction permet d'affecter les infos saisies à la variable convenable\n    value: function handleChangeAmount(event) {\n      var target = event.target;\n      var value = target.value;\n      var id = target.id;\n      this.setState(_defineProperty({}, id, value));\n      this.loadCommissionData(value);\n    } // Cette fonction se déclenche lorsque l'utilisateur saisit le montant du virement\n    // Elle permet de récupérer la commission du virement.\n\n  }, {\n    key: \"getTransactionCurrency\",\n    // Cette fonction permet d'affecter la devise du compte à débiter à la variable \"transactionCurrency\" lorsque\n    // la devise du compte à débiter est la meme que du compte à créditer\n    value: function getTransactionCurrency() {\n      if (this.state.principalAccountCurrency === this.state.beneficiaryAccountCurrency) {\n        this.setState({\n          transactionCurrency: this.state.principalAccountCurrency\n        });\n      }\n    }\n  }, {\n    key: \"render\",\n    value: function render() {\n      var _this3 = this;\n\n      return React.createElement(React.Fragment, null, React.createElement(\"div\", {\n        className: \"content\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 322\n        },\n        __self: this\n      }, React.createElement(Row, {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 323\n        },\n        __self: this\n      }, React.createElement(Col, {\n        md: \"12\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 324\n        },\n        __self: this\n      }, React.createElement(Card, {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 325\n        },\n        __self: this\n      }, React.createElement(CardHeader, {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 326\n        },\n        __self: this\n      }, React.createElement(\"h4\", {\n        className: \"title\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 327\n        },\n        __self: this\n      }, \"Saisie du virement\")), React.createElement(CardBody, {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 329\n        },\n        __self: this\n      }, React.createElement(Row, {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 330\n        },\n        __self: this\n      }, React.createElement(Col, {\n        md: \"2\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 331\n        },\n        __self: this\n      }), React.createElement(Col, {\n        md: \"8\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 332\n        },\n        __self: this\n      }, React.createElement(\"form\", {\n        onSubmit: this.handleSubmit,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 334\n        },\n        __self: this\n      }, React.createElement(\"div\", {\n        className: \"form-row\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 335\n        },\n        __self: this\n      }, React.createElement(FormGroup, {\n        className: \"col-md-6\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 336\n        },\n        __self: this\n      }, React.createElement(Label, {\n        for: \"principalAccount\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 337\n        },\n        __self: this\n      }, \"N\\xB0 compte d\\xE9biteur\"), React.createElement(InputGroup, {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 338\n        },\n        __self: this\n      }, React.createElement(Input, {\n        type: \"number\",\n        id: \"principalAccount\",\n        placeholder: \"D\\xE9biteur\",\n        value: this.state.principalAccount,\n        onChange: function onChange(event) {\n          _this3.handleChange(event);\n\n          _this3.loadAccountCurrency(event);\n        },\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 339\n        },\n        __self: this\n      }), React.createElement(InputGroupAddon, {\n        addonType: \"append\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 349\n        },\n        __self: this\n      }, React.createElement(InputGroupText, {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 350\n        },\n        __self: this\n      }, React.createElement(\"p\", {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 351\n        },\n        __self: this\n      }, this.state.principalAccountCurrency))))), React.createElement(FormGroup, {\n        className: \"col-md-6\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 356\n        },\n        __self: this\n      }, React.createElement(Label, {\n        for: \"beneficiaryAccount\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 357\n        },\n        __self: this\n      }, \"N\\xB0 compte b\\xE9n\\xE9ficiaire\"), React.createElement(InputGroup, {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 358\n        },\n        __self: this\n      }, React.createElement(Input, {\n        type: \"number\",\n        id: \"beneficiaryAccount\",\n        placeholder: \"B\\xE9n\\xE9ficiaire\",\n        value: this.state.beneficiaryAccount,\n        onChange: function onChange(event) {\n          _this3.handleChange(event);\n\n          _this3.loadAccountCurrency(event);\n        },\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 359\n        },\n        __self: this\n      }), React.createElement(InputGroupAddon, {\n        addonType: \"append\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 369\n        },\n        __self: this\n      }, React.createElement(InputGroupText, {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 370\n        },\n        __self: this\n      }, React.createElement(\"p\", {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 371\n        },\n        __self: this\n      }, this.state.beneficiaryAccountCurrency)))))), React.createElement(\"div\", {\n        className: \"form-row\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 378\n        },\n        __self: this\n      }, React.createElement(FormGroup, {\n        className: \"col-md-4\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 379\n        },\n        __self: this\n      }, React.createElement(Label, {\n        for: \"transactionAmount\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 380\n        },\n        __self: this\n      }, \"Montant\"), React.createElement(InputGroup, {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 381\n        },\n        __self: this\n      }, React.createElement(Input, {\n        type: \"number\",\n        id: \"transactionAmount\",\n        placeholder: \"Montant ...\",\n        value: this.state.transactionAmount,\n        onChange: function onChange(event) {\n          _this3.handleChangeAmount(event);\n\n          _this3.getTransactionCurrency();\n        },\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 382\n        },\n        __self: this\n      }), React.createElement(InputGroupAddon, {\n        addonType: \"append\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 392\n        },\n        __self: this\n      }, React.createElement(InputGroupText, {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 393\n        },\n        __self: this\n      }, this.state.principalAccountCurrency === this.state.beneficiaryAccountCurrency ? React.createElement(\"p\", {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 395\n        },\n        __self: this\n      }, this.state.transactionCurrency) : React.createElement(\"select\", {\n        name: \"select\",\n        className: \"form-control1\",\n        id: \"transactionCurrency\",\n        value: this.state.transactionCurrency,\n        onChange: this.handleChange,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 396\n        },\n        __self: this\n      }, React.createElement(\"option\", {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 403\n        },\n        __self: this\n      }, this.state.principalAccountCurrency), React.createElement(\"option\", {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 404\n        },\n        __self: this\n      }, this.state.beneficiaryAccountCurrency)))))), React.createElement(FormGroup, {\n        className: \"col-md-4\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 411\n        },\n        __self: this\n      }, React.createElement(Label, {\n        for: \"transferReason\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 412\n        },\n        __self: this\n      }, \"Motif\"), React.createElement(Input, {\n        type: \"text\",\n        placeholder: \"Motif ...\",\n        id: \"transferReason\",\n        value: this.state.transferReason,\n        onChange: this.handleChange,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 413\n        },\n        __self: this\n      })), React.createElement(FormGroup, {\n        className: \"col-md-4\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 421\n        },\n        __self: this\n      }, React.createElement(Label, {\n        for: \"executionDate\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 422\n        },\n        __self: this\n      }, \"Date d'execution\"), React.createElement(ReactDatetime, {\n        id: \"executionDate\",\n        inputProps: {\n          className: \"form-control\",\n          placeholder: \"Date Picker Here\"\n        },\n        value: this.state.executionDate,\n        defaultValue: new Date(),\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 423\n        },\n        __self: this\n      }))),\n      /********************* Echange **************/\n      this.state.principalAccountCurrency === \"MAD\" && this.state.beneficiaryAccountCurrency !== \"MAD\" ? React.createElement(React.Fragment, null, this.state.transactionAmount > this.state.largeAmount ? React.createElement(FormGroup, {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 439\n        },\n        __self: this\n      }, React.createElement(Label, {\n        for: \"tradingTicket\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 440\n        },\n        __self: this\n      }, \"Ticket de n\\xE9gociation\"), React.createElement(Input, {\n        type: \"number\",\n        id: \"tradingTicket\",\n        placeholder: \"ticket ...\",\n        className: \"tim-icons\",\n        value: this.state.tradingTicket,\n        onChange: this.handleChange,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 442\n        },\n        __self: this\n      })) : null, React.createElement(FormGroup, {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 453\n        },\n        __self: this\n      }, React.createElement(Label, {\n        for: \"transferNature\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 454\n        },\n        __self: this\n      }, \"Nature de transfert\"), React.createElement(Input, {\n        type: \"select\",\n        name: \"select\",\n        id: \"transferNature\",\n        value: this.state.transferNature,\n        onChange: this.handleChange,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 455\n        },\n        __self: this\n      }, React.createElement(\"option\", {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 462\n        },\n        __self: this\n      }, \"1\"), React.createElement(\"option\", {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 463\n        },\n        __self: this\n      }, \"2\"))), React.createElement(\"div\", {\n        className: \"form-row\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 467\n        },\n        __self: this\n      }, React.createElement(FormGroup, {\n        className: \"col-md-3\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 468\n        },\n        __self: this\n      }, React.createElement(Label, {\n        for: \"authorizationNumber\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 469\n        },\n        __self: this\n      }, \"N\\xB0 d'autorisation\"), React.createElement(Input, {\n        type: \"number\",\n        id: \"authorizationNumber\",\n        placeholder: \"Code ...\",\n        value: this.state.authorizationNumber,\n        onChange: this.handleChange,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 471\n        },\n        __self: this\n      })), React.createElement(FormGroup, {\n        className: \"col-md-6\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 479\n        },\n        __self: this\n      }, React.createElement(Label, {\n        for: \"authorizationValidity\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 480\n        },\n        __self: this\n      }, \"Validit\\xE9 de l'autorisation\"), React.createElement(Input, {\n        type: \"number\",\n        id: \"authorizationValidity\",\n        placeholder: \"???\",\n        value: this.state.authorizationValidity,\n        onChange: this.handleChange,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 482\n        },\n        __self: this\n      })), React.createElement(FormGroup, {\n        className: \"col-md-3\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 490\n        },\n        __self: this\n      }, React.createElement(Label, {\n        for: \"exchangeRate\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 491\n        },\n        __self: this\n      }, \"Cours de change\"), React.createElement(Input, {\n        type: \"number\",\n        id: \"exchangeRate\",\n        placeholder: \"...\",\n        value: this.state.exchangeRate,\n        disabled: true,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 492\n        },\n        __self: this\n      })))) : null\n      /********************* Commission **************/\n      , React.createElement(FormGroup, {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 503\n        },\n        __self: this\n      }, React.createElement(Label, {\n        for: \"chargeType\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 504\n        },\n        __self: this\n      }, \"Type de charge\"), React.createElement(Input, {\n        type: \"select\",\n        id: \"chargeType\",\n        name: \"select\",\n        value: this.state.chargeType,\n        onChange: this.handleChange,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 505\n        },\n        __self: this\n      }, React.createElement(\"option\", {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 512\n        },\n        __self: this\n      }, \"OUR\"), React.createElement(\"option\", {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 513\n        },\n        __self: this\n      }, \"BIN\"))), React.createElement(\"div\", {\n        className: \"form-row\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 517\n        },\n        __self: this\n      }, React.createElement(FormGroup, {\n        className: \"col-md-4\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 518\n        },\n        __self: this\n      }, React.createElement(Label, {\n        for: \"commissionCode\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 519\n        },\n        __self: this\n      }, \"Taux applique\"), React.createElement(\"h3\", {\n        className: \"card-title\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 521\n        },\n        __self: this\n      }, this.state.applyedRate + \" \", React.createElement(\"span\", {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 522\n        },\n        __self: this\n      }))), React.createElement(FormGroup, {\n        className: \"col-md-4\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 526\n        },\n        __self: this\n      }, React.createElement(Label, {\n        for: \"commissionAmount\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 527\n        },\n        __self: this\n      }, \"Montant commission\"), React.createElement(\"h3\", {\n        className: \"card-title\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 528\n        },\n        __self: this\n      }, this.state.commissionAmount + \" \", React.createElement(\"span\", {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 529\n        },\n        __self: this\n      }))), React.createElement(FormGroup, {\n        className: \"col-md-4\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 533\n        },\n        __self: this\n      }, React.createElement(Label, {\n        for: \"commissionTVA\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 534\n        },\n        __self: this\n      }, \"TVA sur commission\"), React.createElement(\"h3\", {\n        className: \"card-title\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 535\n        },\n        __self: this\n      }, this.state.commissionTVA + \" \", React.createElement(\"span\", {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 536\n        },\n        __self: this\n      })))), React.createElement(FormGroup, {\n        check: true,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 541\n        },\n        __self: this\n      }, React.createElement(Label, {\n        for: \"totalAmount\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 542\n        },\n        __self: this\n      }, \"Montant total\"), React.createElement(\"h3\", {\n        className: \"card-title\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 543\n        },\n        __self: this\n      }, this.state.totalAmount + \" \", React.createElement(\"span\", {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 544\n        },\n        __self: this\n      }, this.state.transactionCurrency))), React.createElement(FormGroup, {\n        check: true,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 547\n        },\n        __self: this\n      }, React.createElement(Label, {\n        className: \"form-check-label\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 548\n        },\n        __self: this\n      }, React.createElement(Input, {\n        className: \"form-check-input\",\n        type: \"checkbox\",\n        id: \"applyCommission\",\n        onChange: this.handleChangeCheckbox,\n        checked: this.state.applyCommission,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 549\n        },\n        __self: this\n      }), \"Appliquer commission\", React.createElement(\"span\", {\n        className: \"form-check-sign\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 557\n        },\n        __self: this\n      }, React.createElement(\"span\", {\n        className: \"check\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 558\n        },\n        __self: this\n      })))), React.createElement(\"br\", {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 563\n        },\n        __self: this\n      }), React.createElement(Button, {\n        type: \"reset\",\n        color: \"primary\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 564\n        },\n        __self: this\n      }, \"Annuler\"), React.createElement(Button, {\n        type: \"submit\",\n        color: \"primary\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 565\n        },\n        __self: this\n      }, \"Virer\"))), React.createElement(Col, {\n        md: \"2\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 568\n        },\n        __self: this\n      }))))))));\n    }\n  }]);\n\n  return TransferForm;\n}(React.Component);\n\nvar mapStateToProps = function mapStateToProps(state) {\n  return {\n    currentUser: state.currentUser\n  };\n};\n\nexport default connect(mapStateToProps, {\n  getCurrentUser: getCurrentUser\n})(TransferForm);","map":{"version":3,"sources":["/Users/geekh04/workspace/BCP/transactionMDP-client-side/src/views/User/Transfer/TransferForm.jsx"],"names":["React","getAccountCurrency","doTransfer","getCommissionData","ReactDatetime","Card","CardHeader","CardBody","InputGroupAddon","InputGroupText","InputGroup","Row","Col","FormGroup","Input","Label","Button","connect","getCurrentUser","Swal","withReactContent","MySwal","TransferForm","props","loadAccountCurrency","event","number","target","value","id","length","idCurrency","promise","setState","isLoadingCurrency","Toast","mixin","toast","position","showConfirmButton","timer","then","response","code","libelle","fire","type","title","catch","error","alert","loadCommissionData","commissionData","accountN1","state","principalAccount","accountN2","beneficiaryAccount","amount","applyedRate","commissionRate","commissionAmount","commissionTVA","tvaAmount","getTotalAmount","applyCommission","totalAmount","parseFloat","transactionAmount","focused","transactionType","principalAccountCurrency","beneficiaryAccountCurrency","transactionCurrency","transferReason","executionDate","Date","chargeType","transferNature","authorizationNumber","authorizationValidity","exchangeRate","tradingTicket","largeAmount","account","handleChange","bind","handleSubmit","handleChangeCheckbox","checked","preventDefault","transferData","currentUser","role","isExchange","history","push","status","message","handleChangeAmount","getTransactionCurrency","className","placeholder","Component","mapStateToProps"],"mappings":"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","sourcesContent":["import React from \"react\";\n\n// API\nimport {\n    getAccountCurrency, doTransfer, getCommissionData\n} from '../../../util/APIUtils';\n// react plugin used to create datetimepicker\nimport ReactDatetime from \"react-datetime\";\n\n// reactstrap components\nimport {\n    Card,\n    CardHeader,\n    CardBody,\n    InputGroupAddon,\n    InputGroupText,\n    InputGroup,\n    Row,\n    Col,\n    FormGroup,\n    Input,\n    Label,\n    Button\n} from \"reactstrap\";\n\n// Redux components\nimport { connect } from \"react-redux\";\nimport { getCurrentUser } from \"../../../redux/actions\";\n\n// Sweet alert components\nimport Swal from \"sweetalert2\";\nimport withReactContent from \"sweetalert2-react-content\";\n\nconst MySwal = withReactContent(Swal);\n\n/** La page du virement\n * Cette page présente un formulaire qui contient l'ensemble des informations demandées pour effectuer un virement\n * */\n\nclass TransferForm extends React.Component {\n    // Constructeur\n    constructor(props) {\n        super(props);\n        this.state = {\n            focused: \"\",\n            transactionType: \"\",              // Type de transaction\n            principalAccount: \"\",             // Compte donneur d’ordre\n            principalAccountCurrency: \"NAN\",         // Devise Compte donneur ordre\n            beneficiaryAccount: \"\",           // Compte bénéficiaire\n            beneficiaryAccountCurrency: \"NaN\",      // Devise Compte bénéficiaire\n            transactionAmount: 0,             // Montant de l’opération\n            transactionCurrency: \"NaN\",       // Devise de l’opération: doit être égale à la devise du compte à débiter ou celle du compte à créditer\n            transferReason: \"\",               // Motif de virement\n            executionDate: new Date(),        // Date exécution : par défaut c'est la date courante\n            /*DBValueDate: \"\",                // Date valeur DB: Par défaut = J-1 (paramétrable par catégorie de cpt)\n            CRValueDate: \"\",*/                // Date valeur CR: Par défaut = J+1 (paramétrable par catégorie de cpt)\n            //commissionCode: 0,              // Code Commission appliquée: Non modifiable\n            applyedRate: 0,                    // taux appliqué: Non modifiable\n            commissionAmount: 0,              // Montant commission: Non modifiable\n            applyCommission: true,            // Appliquer commission: OUI/NON\n            commissionTVA: 0,                 // TVA sur commission: Calculé automatiquement par un taux paramétrable\n            chargeType: \"\",                   // Type de charge : = ‘OUR’ par défaut La charge est à appliquer sur le compte à débiter\n            totalAmount: 0,                   // Le montant total à débiter\n            /* Saisie uniquement pour les  transferts en devise */\n            transferNature: \"\",               // Nature de transfert : Saisie uniquement pour MAD to MAC ou MAD to Autre devise\n            authorizationNumber: \"\",          // Numéro d’autorisation: Saisie uniquement pour MAD to MAC ou MAD to Autre devise\n            authorizationValidity: \"\",        // Validité de l’autorisation: Saisie uniquement pour MAD to MAC ou MAD to Autre devise\n            exchangeRate: \"\",                 // Cours de change: Non modifiable\n            tradingTicket: \"\",                // La référence du ticket de négociation: Saisie uniquement pour les  clients de la salle de marché ou pour les transactions de très grand montant\n            largeAmount: 4000,                // *****************************************\n\n            account: [],\n            isLoadingCurrency: true\n        };\n\n        this.handleChange = this.handleChange.bind(this);\n        this.handleSubmit = this.handleSubmit.bind(this);\n        this.handleChangeCheckbox = this.handleChangeCheckbox.bind(this);\n        this.loadCommissionData = this.loadCommissionData.bind(this);\n        this.loadAccountCurrency = this.loadAccountCurrency.bind(this);\n        this.getTotalAmount = this.getTotalAmount.bind(this);\n    }\n\n    componentDidMount() {\n        this.props.getCurrentUser();\n    }\n\n    // Cette fonction permet d'affecter les infos saisies à la variable convenable\n    handleChange(event) {\n        const target = event.target;\n        const value = target.value;\n        const id = target.id;\n\n        this.setState({\n            [id]: value\n        });\n    }\n\n    // Cette fonction se déclenche lorsque l'utilisateur clique sur le checkbox \"appliquer commission\"\n    // Elle permet d'affecter une valeur à la variable \"applyCommission\" avec la mise à jour du montant total\n    // - true : pour appliquer la commission\n    // - false: sinon\n    handleChangeCheckbox(event) {\n        const target = event.target;\n        const value = target.checked;\n        const id = target.id;\n\n        this.setState({\n            [id]: value\n        });\n\n        // Appler a la fonction getTotalAmount pour la mise à jour du montant total\n        this.getTotalAmount(target.checked);\n    }\n\n    // Cette fonction se déclenche lorsque l'utilisateur clique sur \"virer\"\n    // Elle permet d'envoyer les données de l'opération au serveur\n    handleSubmit(event) {\n        event.preventDefault();\n\n        // Récupérer les données du virement\n        const transferData = {\n            // affecter la valeur de type de transaction selon le role d'utilisateur\n            transactionType: this.props.currentUser.role===\"ROLE_AGENT\" ? \"IEA\"\n                             : this.props.currentUser.role===\"ROLE_CTN\" ? \"IAC\"\n                             : this.props.currentUser.role===\"ROLE_CTRL\"? \"ctrl\":\"\",\n            principalAccount: this.state.principalAccount,\n            //principalAccountCurrency: this.state.principalAccountCurrency,*************************************\n            beneficiaryAccount: this.state.beneficiaryAccount,\n            //beneficiaryAccountCurrency: this.state.beneficiaryAccountCurrency,*************************************\n            transactionAmount: this.state.transactionAmount,\n            transactionCurrency: this.state.transactionCurrency,\n            transferReason: this.state.transferReason,\n            executionDate: this.state.executionDate,\n            transferNature: this.state.transferNature,\n            authorizationNumber: this.state.authorizationNumber,\n            //authorizationValidity: this.state.authorizationValidity,\n            //commissionCode: this.state.commissionCode,\n            commissionRate: this.state.applyedRate,\n            commissionAmount: this.state.commissionAmount,\n            applyCommission: this.state.applyCommission,\n            commissionTVA: this.state.commissionTVA,\n            chargeType: this.state.chargeType,\n            isExchange: this.state.principalAccountCurrency === \"MAD\" && this.state.beneficiaryAccountCurrency !== \"MAD\",\n            //exchangeRate: this.state.exchangeRate,\n            //tradingTicket: this.state.tradingTicket,\n            //totalAmount: this.state.totalAmount\n        };\n\n        // Envoyer les données de l'opération au serveur\n        doTransfer(transferData)\n            .then(response => {\n                // affichee un message de succès\n                /*return */\n                MySwal.fire({\n                    type: 'success',\n                    title: 'Virement effectué avec succès',\n                    showConfirmButton: false,\n                    timer: 1500\n                });\n                // redirection vers un tableau de transactions.\n                this.props.history.push(\"/user/lsttransfers\");\n            }).catch(error => {\n            if (error.status === 401) {\n                // affichee un message d’erreur\n                MySwal.fire({\n                    type: 'error',\n                    title: 'Vous avez été déconnecté. Veuillez vous connecter pour éffectuer cette opération.',\n                    showConfirmButton: false,\n                    timer: 1500\n                });\n                // redirection vers la page d'authentification.\n                this.props.history.push('/login');\n            } else {\n                // affichee un message d’erreur\n                MySwal.fire({\n                    type: 'warning',\n                    title: error.message || 'Pardon! Quelque chose s\\'est mal passé. Veuillez réessayer!',\n                    showConfirmButton: false,\n                    timer: 1500\n                })\n            }\n        });\n    }\n\n    // Cette fonction se déclenche lorsque l'utilisateur saisit le numero d'un compte\n    // Elle permet de récupérer le devise du compte sinon elle retourne un message d'erreur\n    loadAccountCurrency = (event) => {\n        const number = event.target.value;\n        const id = event.target.id;\n\n        if (number.length >= 4) {\n            let idCurrency = id + \"Currency\";\n            let promise;\n\n            promise = getAccountCurrency(number);\n\n            if (!promise) {\n                return;\n            }\n\n            this.setState({\n                isLoadingCurrency: true\n            });\n\n            // Initialisation de l'alert\n            const Toast = MySwal.mixin({\n                toast: true,\n                position: 'center',\n                showConfirmButton: false,\n                timer: 2000\n            });\n            promise\n                .then(response => {\n                    // récupérer la devise\n                    if (response.code === \"200\") {\n                        this.setState({\n                            [idCurrency]: response.libelle,\n                            isLoadingCurrency: false\n                        })\n                    } else {\n                        // afficher un message d’erreur\n                        Toast.fire({\n                            type: 'error',\n                            title: response.libelle+'. Vous pouvez pas  effectuer cette opération!'\n                        });\n                    }\n                }).catch(error => {\n                alert(error);\n                this.setState({\n                    isLoadingCurrency: false\n                })\n            });\n        }\n    };\n\n\n    // Cette fonction permet d'affecter les infos saisies à la variable convenable\n    handleChangeAmount(event) {\n        const target = event.target;\n        const value = target.value;\n        const id = target.id;\n\n        this.setState({\n            [id]: value\n        });\n        this.loadCommissionData(value);\n    }\n\n    // Cette fonction se déclenche lorsque l'utilisateur saisit le montant du virement\n    // Elle permet de récupérer la commission du virement.\n    loadCommissionData = (value) => {\n        //event.preventDefault();\n\n        if (value===\"\" || value===0) {\n            return;\n        }\n\n        let commissionData = {\n            accountN1: this.state.principalAccount,\n            accountN2: this.state.beneficiaryAccount,\n            amount: value\n        };\n\n        let promise;\n\n        promise = getCommissionData(commissionData);\n\n        if (!promise) {\n            return;\n        }\n\n        this.setState({\n            isLoadingCurrency: true\n        });\n\n        promise\n            .then(response => {\n                // récupérer la commission\n                this.setState({\n                    applyedRate: response.commissionRate,\n                    commissionAmount: response.commissionAmount,\n                    commissionTVA: response.tvaAmount,\n                    isLoadingCurrency: false\n                });\n                this.getTotalAmount(this.state.applyCommission);\n            }).catch(error => {\n            this.setState({\n                isLoadingCurrency: false\n            })\n        });\n    };\n\n    // Cette fonction permet de calculer et d'affecter le montant total selon la valeur de \"applyCommission\n    // - Si applyCommission = true : Montant Total = montant du virement + montant de la commission + TVA sur commission\n    // - Sinon : Montant Total = montant du virement\n    getTotalAmount = (applyCommission) => {\n        if (applyCommission) {\n            this.setState({\n                totalAmount: parseFloat(this.state.transactionAmount)+this.state.commissionAmount + this.state.commissionTVA\n            });\n        } else {\n            this.setState({\n                totalAmount: this.state.transactionAmount\n            });\n        }\n    };\n\n    // Cette fonction permet d'affecter la devise du compte à débiter à la variable \"transactionCurrency\" lorsque\n    // la devise du compte à débiter est la meme que du compte à créditer\n    getTransactionCurrency() {\n        if (this.state.principalAccountCurrency === this.state.beneficiaryAccountCurrency) {\n            this.setState({\n                transactionCurrency: this.state.principalAccountCurrency\n            })\n        }\n    }\n\n    render() {\n        return (\n            <>\n                <div className=\"content\">\n                    <Row>\n                        <Col md=\"12\">\n                            <Card>\n                                <CardHeader>\n                                    <h4 className=\"title\">Saisie du virement</h4>\n                                </CardHeader>\n                                <CardBody>\n                                    <Row>\n                                        <Col md=\"2\"></Col>\n                                        <Col md=\"8\">\n                                            {/* Virement INTRA en agence*/}\n                                            <form onSubmit={this.handleSubmit}>\n                                                <div className=\"form-row\">\n                                                    <FormGroup className=\"col-md-6\">\n                                                        <Label for=\"principalAccount\">N° compte débiteur</Label>\n                                                        <InputGroup>\n                                                            <Input\n                                                                type=\"number\"\n                                                                id=\"principalAccount\"\n                                                                placeholder=\"Débiteur\"\n                                                                value={this.state.principalAccount}\n                                                                onChange={(event) => {\n                                                                    this.handleChange(event);\n                                                                    this.loadAccountCurrency(event)\n                                                                }}\n                                                            />\n                                                            <InputGroupAddon addonType=\"append\">\n                                                                <InputGroupText>\n                                                                    <p>{this.state.principalAccountCurrency}</p>\n                                                                </InputGroupText>\n                                                            </InputGroupAddon>\n                                                        </InputGroup>\n                                                    </FormGroup>\n                                                    <FormGroup className=\"col-md-6\">\n                                                        <Label for=\"beneficiaryAccount\">N° compte bénéficiaire</Label>\n                                                        <InputGroup>\n                                                            <Input\n                                                                type=\"number\"\n                                                                id=\"beneficiaryAccount\"\n                                                                placeholder=\"Bénéficiaire\"\n                                                                value={this.state.beneficiaryAccount}\n                                                                onChange={(event) => {\n                                                                    this.handleChange(event);\n                                                                    this.loadAccountCurrency(event)\n                                                                }}\n                                                            />\n                                                            <InputGroupAddon addonType=\"append\">\n                                                                <InputGroupText>\n                                                                    <p>{this.state.beneficiaryAccountCurrency}</p>\n                                                                </InputGroupText>\n                                                            </InputGroupAddon>\n                                                        </InputGroup>\n                                                    </FormGroup>\n                                                </div>\n\n                                                <div className=\"form-row\">\n                                                    <FormGroup className=\"col-md-4\">\n                                                        <Label for=\"transactionAmount\">Montant</Label>\n                                                        <InputGroup>\n                                                            <Input\n                                                                type=\"number\"\n                                                                id=\"transactionAmount\"\n                                                                placeholder=\"Montant ...\"\n                                                                value={this.state.transactionAmount}\n                                                                onChange={(event) => {\n                                                                    this.handleChangeAmount(event);\n                                                                    this.getTransactionCurrency();\n                                                                }}\n                                                            />\n                                                            <InputGroupAddon addonType=\"append\">\n                                                                <InputGroupText>\n                                                                    {this.state.principalAccountCurrency === this.state.beneficiaryAccountCurrency ?\n                                                                        (<p>{this.state.transactionCurrency}</p>) :\n                                                                        (<select\n                                                                            name=\"select\"\n                                                                            className=\"form-control1\"\n                                                                            id=\"transactionCurrency\"\n                                                                            value={this.state.transactionCurrency}\n                                                                            onChange={this.handleChange}\n                                                                        >\n                                                                            <option>{this.state.principalAccountCurrency}</option>\n                                                                            <option>{this.state.beneficiaryAccountCurrency}</option>\n                                                                        </select>)\n                                                                    }\n                                                                </InputGroupText>\n                                                            </InputGroupAddon>\n                                                        </InputGroup>\n                                                    </FormGroup>\n                                                    <FormGroup className=\"col-md-4\">\n                                                        <Label for=\"transferReason\">Motif</Label>\n                                                        <Input\n                                                            type=\"text\"\n                                                            placeholder=\"Motif ...\"\n                                                            id=\"transferReason\"\n                                                            value={this.state.transferReason}\n                                                            onChange={this.handleChange}\n                                                        />\n                                                    </FormGroup>\n                                                    <FormGroup className=\"col-md-4\">\n                                                        <Label for=\"executionDate\">Date d'execution</Label>\n                                                        <ReactDatetime\n                                                            id=\"executionDate\"\n                                                            inputProps={{\n                                                                className: \"form-control\",\n                                                                placeholder: \"Date Picker Here\"\n                                                            }}\n                                                            value={this.state.executionDate}\n                                                            defaultValue={new Date()}\n                                                        />\n                                                    </FormGroup>\n                                                </div>\n                                                {/********************* Echange **************/\n                                                    (this.state.principalAccountCurrency === \"MAD\" && this.state.beneficiaryAccountCurrency !== \"MAD\") ? (\n                                                        <>\n                                                            {\n                                                                (this.state.transactionAmount > this.state.largeAmount) ? (\n                                                                    <FormGroup>\n                                                                        <Label for=\"tradingTicket\">Ticket de\n                                                                            négociation</Label>\n                                                                        <Input\n                                                                            type=\"number\"\n                                                                            id=\"tradingTicket\"\n                                                                            placeholder=\"ticket ...\"\n                                                                            className=\"tim-icons\"\n                                                                            value={this.state.tradingTicket}\n                                                                            onChange={this.handleChange}\n                                                                        />\n                                                                    </FormGroup>\n                                                                ) : null\n                                                            }\n                                                            <FormGroup>\n                                                                <Label for=\"transferNature\">Nature de transfert</Label>\n                                                                <Input\n                                                                    type=\"select\"\n                                                                    name=\"select\"\n                                                                    id=\"transferNature\"\n                                                                    value={this.state.transferNature}\n                                                                    onChange={this.handleChange}\n                                                                >\n                                                                    <option>1</option>\n                                                                    <option>2</option>\n                                                                </Input>\n                                                            </FormGroup>\n\n                                                            <div className=\"form-row\">\n                                                                <FormGroup className=\"col-md-3\">\n                                                                    <Label for=\"authorizationNumber\">N°\n                                                                        d'autorisation</Label>\n                                                                    <Input\n                                                                        type=\"number\"\n                                                                        id=\"authorizationNumber\"\n                                                                        placeholder=\"Code ...\"\n                                                                        value={this.state.authorizationNumber}\n                                                                        onChange={this.handleChange}\n                                                                    />\n                                                                </FormGroup>\n                                                                <FormGroup className=\"col-md-6\">\n                                                                    <Label for=\"authorizationValidity\">Validité de\n                                                                        l'autorisation</Label>\n                                                                    <Input\n                                                                        type=\"number\"\n                                                                        id=\"authorizationValidity\"\n                                                                        placeholder=\"???\"\n                                                                        value={this.state.authorizationValidity}\n                                                                        onChange={this.handleChange}\n                                                                    />\n                                                                </FormGroup>\n                                                                <FormGroup className=\"col-md-3\">\n                                                                    <Label for=\"exchangeRate\">Cours de change</Label>\n                                                                    <Input\n                                                                        type=\"number\"\n                                                                        id=\"exchangeRate\"\n                                                                        placeholder=\"...\"\n                                                                        value={this.state.exchangeRate}\n                                                                        disabled\n                                                                    />\n                                                                </FormGroup>\n                                                            </div>\n                                                        </>) : null\n                                                    /********************* Commission **************/}\n                                                <FormGroup>\n                                                    <Label for=\"chargeType\">Type de charge</Label>\n                                                    <Input\n                                                        type=\"select\"\n                                                        id=\"chargeType\"\n                                                        name=\"select\"\n                                                        value={this.state.chargeType}\n                                                        onChange={this.handleChange}\n                                                    >\n                                                        <option>OUR</option>\n                                                        <option>BIN</option>\n                                                    </Input>\n                                                </FormGroup>\n\n                                                <div className=\"form-row\">\n                                                    <FormGroup className=\"col-md-4\">\n                                                        <Label for=\"commissionCode\">{/*Code Commission/*/}Taux\n                                                            applique</Label>\n                                                        <h3 className=\"card-title\">\n                                                            {this.state.applyedRate + \" \"}<span></span>\n                                                        </h3>\n                                                    </FormGroup>\n\n                                                    <FormGroup className=\"col-md-4\">\n                                                        <Label for=\"commissionAmount\">Montant commission</Label>\n                                                        <h3 className=\"card-title\">\n                                                            {this.state.commissionAmount + \" \"}<span></span>\n                                                        </h3>\n                                                    </FormGroup>\n\n                                                    <FormGroup className=\"col-md-4\">\n                                                        <Label for=\"commissionTVA\">TVA sur commission</Label>\n                                                        <h3 className=\"card-title\">\n                                                            {this.state.commissionTVA + \" \"}<span></span>\n                                                        </h3>\n                                                    </FormGroup>\n                                                </div>\n\n                                                <FormGroup check>\n                                                    <Label for=\"totalAmount\">Montant total</Label>\n                                                    <h3 className=\"card-title\">\n                                                        {this.state.totalAmount + \" \"}<span>{this.state.transactionCurrency}</span>\n                                                    </h3>\n                                                </FormGroup>\n                                                <FormGroup check>\n                                                    <Label className=\"form-check-label\">\n                                                        <Input\n                                                            className=\"form-check-input\"\n                                                            type=\"checkbox\"\n                                                            id=\"applyCommission\"\n                                                            onChange={this.handleChangeCheckbox}\n                                                            checked={this.state.applyCommission}\n                                                        />\n                                                        Appliquer commission\n                                                        <span className=\"form-check-sign\">\n                                                          <span className=\"check\"/>\n                                                        </span>\n                                                    </Label>\n                                                </FormGroup>\n\n                                                <br/>\n                                                <Button type=\"reset\" color=\"primary\">Annuler</Button>\n                                                <Button type=\"submit\" color=\"primary\">Virer</Button>\n                                            </form>\n                                        </Col>\n                                        <Col md=\"2\"></Col>\n                                    </Row>\n                                </CardBody>\n                            </Card>\n                        </Col>\n                    </Row>\n                </div>\n            </>\n        );\n    }\n}\n\nconst mapStateToProps = (state) =>{\n    return {\n        currentUser: state.currentUser\n    };\n};\n\nexport default connect(mapStateToProps, { getCurrentUser })(TransferForm);\n"]},"metadata":{},"sourceType":"module"}