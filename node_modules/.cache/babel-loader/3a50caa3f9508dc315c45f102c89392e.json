{"ast":null,"code":"/*import React from \"react\";\nimport { Route, Switch } from \"react-router-dom\";\n// javascript plugin used to create scrollbars on windows\nimport PerfectScrollbar from \"perfect-scrollbar\";\n\nimport {getCurrentUser} from \"../../util/APIUtils\";\n\n// core components\nimport AdminNavbar from \"components/Navbars/AdminNavbar.jsx\";\nimport Footer from \"components/Footer/Footer.jsx\";\nimport Sidebar from \"components/Sidebar/Sidebar.jsx\";\nimport FixedPlugin from \"components/FixedPlugin/FixedPlugin.jsx\";\n\nimport dashboardRoutesAdmin from \"routes/dashboardAdmin.jsx\";\nimport dashboardRoutesUser from \"routes/dashboardUser.jsx\";\n//import routes from \"../../routes.js\";\nimport Transfer from \"views/Dashboard/Sections/Transfer.jsx\";\nimport Notifications from \"views/Dashboard/Sections/Notifications.jsx\";\n\nimport NotFound from \"../NotFound\";\n\nimport logo from \"assets/img/react-logo.png\";\n\nvar ps;\n\nclass Dashboard extends React.Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      user: null,\n      currentUser: this.props.currentUser,\n      isLoading: true,\n      backgroundColor: \"primary\",\n      sidebarOpened:\n        document.documentElement.className.indexOf(\"nav-open\") !== -1\n    };\n    this.loadUserProfile = this.loadUserProfile.bind(this);\n  }\n  loadUserProfile() {\n    this.setState({\n      isLoading: true\n    });\n\n    getCurrentUser()\n        .then(response => {\n          this.setState({\n            user: response,\n            isLoading: false\n          });\n        }).catch(error => {\n      if(error.status === 404) {\n        this.setState({\n          notFound: true,\n          isLoading: false\n        });\n      } else {\n        this.setState({\n          serverError: true,\n          isLoading: false\n        });\n      }\n    });\n  }\n  componentDidMount() {\n    if (navigator.platform.indexOf(\"Win\") > -1) {\n      document.documentElement.className += \" perfect-scrollbar-on\";\n      document.documentElement.classList.remove(\"perfect-scrollbar-off\");\n      ps = new PerfectScrollbar(this.refs.mainPanel, { suppressScrollX: true });\n      let tables = document.querySelectorAll(\".table-responsive\");\n      for (let i = 0; i < tables.length; i++) {\n        ps = new PerfectScrollbar(tables[i]);\n      }\n    }\n    this.loadUserProfile();\n  }\n  componentWillUnmount() {\n    if (navigator.platform.indexOf(\"Win\") > -1) {\n      ps.destroy();\n      document.documentElement.className += \" perfect-scrollbar-off\";\n      document.documentElement.classList.remove(\"perfect-scrollbar-on\");\n    }\n  }\n  componentDidUpdate(e) {\n    if (e.history.action === \"PUSH\") {\n      if (navigator.platform.indexOf(\"Win\") > -1) {\n        let tables = document.querySelectorAll(\".table-responsive\");\n        for (let i = 0; i < tables.length; i++) {\n          ps = new PerfectScrollbar(tables[i]);\n        }\n      }\n      document.documentElement.scrollTop = 0;\n      document.scrollingElement.scrollTop = 0;\n      this.refs.mainPanel.scrollTop = 0;\n    }\n    //this.loadUserProfile();\n  }\n  // this function opens and closes the sidebar on small devices\n  handleToggleSidebar = () => {\n    document.documentElement.classList.toggle(\"nav-open\");\n    this.setState({ sidebarOpened: !this.state.sidebarOpened });\n  };\n  /*getRoutes = routes => {\n    return routes.map((prop, key) => {\n      if (prop.layout === \"/admin\") {\n        return (\n          <Route\n            path={prop.layout + prop.path}\n            component={prop.component}\n            key={key}\n          />\n        );\n      } else {\n        return null;\n      }\n    });\n  };*\n  handleBgClick = color => {\n    this.setState({ backgroundColor: color });\n  };\n\n  render() {\n    let dashboardRoutes;\n    {/*this.props.currentUser.role===\"ROLE_CLUB\"*true?(dashboardRoutes=dashboardRoutesUser):(dashboardRoutes=dashboardRoutesAdmin);}\n    const switchRoutes = /*this.props.currentUser.role===\"ROLE_USER\"?(*\n        <Switch>\n          <Route exact path=\"/user/transfer\"\n                 render={(props) => <Transfer currentUser={this.state.currentUser} {...props} />}>\n          </Route>\n          <Route exact path=\"/user/notifications\"\n                 render={(props) => <Notifications currentUser={this.state.currentUser} {...props} />}>\n          </Route>\n          <Route component={NotFound} />\n        </Switch>;\n    /*):(\n        <Switch>\n            {/*<Route exact path=\"/dash/dashboard\"\n                 render={(props) => <DashboardPage currentUser={this.state.currentUser} {...props} />}>\n          </Route>\n          <Route exact path=\"/dash/profile\"\n                 render={(props) => <Profile currentUser={this.state.currentUser} {...props} />}>\n          </Route>*}\n          <Route component={NotFound} />\n        </Switch>\n    );*\n    return (\n      <>\n        <div className=\"wrapper\">\n          <Sidebar\n            {...this.props}\n            routes={dashboardRoutes}\n            bgColor={this.state.backgroundColor}\n            logo={{\n              outterLink: \"https://www.bcp.com/\",\n              text: \"Banque Populaire\",\n              imgSrc: logo\n            }}\n            toggleSidebar={this.handleToggleSidebar}\n          />\n          <div\n            className=\"main-panel\"\n            ref=\"mainPanel\"\n            data={this.state.backgroundColor}\n          >\n            <AdminNavbar\n              {...this.props}\n              routes={dashboardRoutes}\n              toggleSidebar={this.toggleSidebar}\n              sidebarOpened={this.state.sidebarOpened}\n              handleLogout={this.props.handleLogout}\n              history={this.props.history}\n            />\n            {/*<Switch>{this.getRoutes(routes)}</Switch>*}\n            {/*this.getRoutes*(switchRoutes)}\n            {// we don't want the Footer to be rendered on map page\n            this.props.location.pathname.indexOf(\"maps\") !== -1 ? null : (\n              <Footer fluid />\n            )}\n          </div>\n        </div>\n        {/*<FixedPlugin\n          bgColor={this.state.backgroundColor}\n          handleBgClick={this.handleBgClick}\n        />*}\n      </>\n    );\n  }\n}\n\nexport default Dashboard;\n*/","map":{"version":3,"sources":["/Users/geekh04/workspace/BCP/bcp-transactionMDP-client/src/views/Dashboard/Dashboard.jsx"],"names":[],"mappings":"AAAA","sourcesContent":["/*import React from \"react\";\nimport { Route, Switch } from \"react-router-dom\";\n// javascript plugin used to create scrollbars on windows\nimport PerfectScrollbar from \"perfect-scrollbar\";\n\nimport {getCurrentUser} from \"../../util/APIUtils\";\n\n// core components\nimport AdminNavbar from \"components/Navbars/AdminNavbar.jsx\";\nimport Footer from \"components/Footer/Footer.jsx\";\nimport Sidebar from \"components/Sidebar/Sidebar.jsx\";\nimport FixedPlugin from \"components/FixedPlugin/FixedPlugin.jsx\";\n\nimport dashboardRoutesAdmin from \"routes/dashboardAdmin.jsx\";\nimport dashboardRoutesUser from \"routes/dashboardUser.jsx\";\n//import routes from \"../../routes.js\";\nimport Transfer from \"views/Dashboard/Sections/Transfer.jsx\";\nimport Notifications from \"views/Dashboard/Sections/Notifications.jsx\";\n\nimport NotFound from \"../NotFound\";\n\nimport logo from \"assets/img/react-logo.png\";\n\nvar ps;\n\nclass Dashboard extends React.Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      user: null,\n      currentUser: this.props.currentUser,\n      isLoading: true,\n      backgroundColor: \"primary\",\n      sidebarOpened:\n        document.documentElement.className.indexOf(\"nav-open\") !== -1\n    };\n    this.loadUserProfile = this.loadUserProfile.bind(this);\n  }\n  loadUserProfile() {\n    this.setState({\n      isLoading: true\n    });\n\n    getCurrentUser()\n        .then(response => {\n          this.setState({\n            user: response,\n            isLoading: false\n          });\n        }).catch(error => {\n      if(error.status === 404) {\n        this.setState({\n          notFound: true,\n          isLoading: false\n        });\n      } else {\n        this.setState({\n          serverError: true,\n          isLoading: false\n        });\n      }\n    });\n  }\n  componentDidMount() {\n    if (navigator.platform.indexOf(\"Win\") > -1) {\n      document.documentElement.className += \" perfect-scrollbar-on\";\n      document.documentElement.classList.remove(\"perfect-scrollbar-off\");\n      ps = new PerfectScrollbar(this.refs.mainPanel, { suppressScrollX: true });\n      let tables = document.querySelectorAll(\".table-responsive\");\n      for (let i = 0; i < tables.length; i++) {\n        ps = new PerfectScrollbar(tables[i]);\n      }\n    }\n    this.loadUserProfile();\n  }\n  componentWillUnmount() {\n    if (navigator.platform.indexOf(\"Win\") > -1) {\n      ps.destroy();\n      document.documentElement.className += \" perfect-scrollbar-off\";\n      document.documentElement.classList.remove(\"perfect-scrollbar-on\");\n    }\n  }\n  componentDidUpdate(e) {\n    if (e.history.action === \"PUSH\") {\n      if (navigator.platform.indexOf(\"Win\") > -1) {\n        let tables = document.querySelectorAll(\".table-responsive\");\n        for (let i = 0; i < tables.length; i++) {\n          ps = new PerfectScrollbar(tables[i]);\n        }\n      }\n      document.documentElement.scrollTop = 0;\n      document.scrollingElement.scrollTop = 0;\n      this.refs.mainPanel.scrollTop = 0;\n    }\n    //this.loadUserProfile();\n  }\n  // this function opens and closes the sidebar on small devices\n  handleToggleSidebar = () => {\n    document.documentElement.classList.toggle(\"nav-open\");\n    this.setState({ sidebarOpened: !this.state.sidebarOpened });\n  };\n  /*getRoutes = routes => {\n    return routes.map((prop, key) => {\n      if (prop.layout === \"/admin\") {\n        return (\n          <Route\n            path={prop.layout + prop.path}\n            component={prop.component}\n            key={key}\n          />\n        );\n      } else {\n        return null;\n      }\n    });\n  };*\n  handleBgClick = color => {\n    this.setState({ backgroundColor: color });\n  };\n\n  render() {\n    let dashboardRoutes;\n    {/*this.props.currentUser.role===\"ROLE_CLUB\"*true?(dashboardRoutes=dashboardRoutesUser):(dashboardRoutes=dashboardRoutesAdmin);}\n    const switchRoutes = /*this.props.currentUser.role===\"ROLE_USER\"?(*\n        <Switch>\n          <Route exact path=\"/user/transfer\"\n                 render={(props) => <Transfer currentUser={this.state.currentUser} {...props} />}>\n          </Route>\n          <Route exact path=\"/user/notifications\"\n                 render={(props) => <Notifications currentUser={this.state.currentUser} {...props} />}>\n          </Route>\n          <Route component={NotFound} />\n        </Switch>;\n    /*):(\n        <Switch>\n            {/*<Route exact path=\"/dash/dashboard\"\n                 render={(props) => <DashboardPage currentUser={this.state.currentUser} {...props} />}>\n          </Route>\n          <Route exact path=\"/dash/profile\"\n                 render={(props) => <Profile currentUser={this.state.currentUser} {...props} />}>\n          </Route>*}\n          <Route component={NotFound} />\n        </Switch>\n    );*\n    return (\n      <>\n        <div className=\"wrapper\">\n          <Sidebar\n            {...this.props}\n            routes={dashboardRoutes}\n            bgColor={this.state.backgroundColor}\n            logo={{\n              outterLink: \"https://www.bcp.com/\",\n              text: \"Banque Populaire\",\n              imgSrc: logo\n            }}\n            toggleSidebar={this.handleToggleSidebar}\n          />\n          <div\n            className=\"main-panel\"\n            ref=\"mainPanel\"\n            data={this.state.backgroundColor}\n          >\n            <AdminNavbar\n              {...this.props}\n              routes={dashboardRoutes}\n              toggleSidebar={this.toggleSidebar}\n              sidebarOpened={this.state.sidebarOpened}\n              handleLogout={this.props.handleLogout}\n              history={this.props.history}\n            />\n            {/*<Switch>{this.getRoutes(routes)}</Switch>*}\n            {/*this.getRoutes*(switchRoutes)}\n            {// we don't want the Footer to be rendered on map page\n            this.props.location.pathname.indexOf(\"maps\") !== -1 ? null : (\n              <Footer fluid />\n            )}\n          </div>\n        </div>\n        {/*<FixedPlugin\n          bgColor={this.state.backgroundColor}\n          handleBgClick={this.handleBgClick}\n        />*}\n      </>\n    );\n  }\n}\n\nexport default Dashboard;\n*/\n"]},"metadata":{},"sourceType":"module"}