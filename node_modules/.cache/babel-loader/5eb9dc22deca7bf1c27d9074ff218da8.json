{"ast":null,"code":"import _classCallCheck from \"/Users/geekh04/workspace/BCP/bcp-transactionMDP-client/node_modules/@babel/runtime/helpers/esm/classCallCheck\";\nimport _createClass from \"/Users/geekh04/workspace/BCP/bcp-transactionMDP-client/node_modules/@babel/runtime/helpers/esm/createClass\";\nimport _possibleConstructorReturn from \"/Users/geekh04/workspace/BCP/bcp-transactionMDP-client/node_modules/@babel/runtime/helpers/esm/possibleConstructorReturn\";\nimport _getPrototypeOf from \"/Users/geekh04/workspace/BCP/bcp-transactionMDP-client/node_modules/@babel/runtime/helpers/esm/getPrototypeOf\";\nimport _inherits from \"/Users/geekh04/workspace/BCP/bcp-transactionMDP-client/node_modules/@babel/runtime/helpers/esm/inherits\";\nimport _assertThisInitialized from \"/Users/geekh04/workspace/BCP/bcp-transactionMDP-client/node_modules/@babel/runtime/helpers/esm/assertThisInitialized\";\nvar _jsxFileName = \"/Users/geekh04/workspace/BCP/bcp-transactionMDP-client/src/views/User/Transfer/TransfersTable3.jsx\";\n\n/*import React from \"react\";\nimport { Link } from \"react-router-dom\";\n// reactstrap components\nimport {\n  Card,\n  CardHeader,\n  CardBody,\n  CardTitle,\n  Table,\n  Row,\n  Col,\n  Button\n} from \"reactstrap\";\n\nimport { connect } from \"react-redux\";\nimport { getCurrentUser } from \"../../../redux/actions\";\n// Sweet alert\nimport Swal from \"sweetalert2\";\nimport withReactContent from \"sweetalert2-react-content\";\n\nimport {TRANSFER_LIST_SIZE} from \"../../../variables/constants\";\nimport { getAllTransfers, cancelTransfer, acceptTransfer, sendTransfer} from \"../../../util/APIUtils\";\nimport NotFound from \"./TransferPage\";\nimport {formatDateTime} from \"../../../util/Helpers\";\nimport LoadingIndicator from \"../../../components/LoadingIndicator/LoadingIndicator\";\n\n\nconst MySwal = withReactContent(Swal);\n\nclass TransfersTable extends React.Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      transfers: [],\n      page: 0,\n      size: 10,\n      totalElements: 0,\n      totalPages: 0,\n      last: true,\n      isLoadingTransfers: true\n    };\n    this.loadTransfersList = this.loadTransfersList.bind(this);\n    this.handleLoadMore = this.handleLoadMore.bind(this);\n    this.handleCancelTransfer = this.handleCancelTransfer.bind(this);\n    this.handleAcceptTransfer = this.handleAcceptTransfer.bind(this);\n    this.handleSendTransfer = this.handleSendTransfer.bind(this);\n  }\n\n  componentDidMount() {\n    this.props.getCurrentUser();\n    /*************************************************\n    //const username = this.props.match.params.username;\n    this.loadTransfersList();\n  }\n\n  componentDidUpdate(nextProps) {\n    /*if(this.props.isAuthenticated !== nextProps.isAuthenticated) {\n      // Reset State\n      this.setState({\n        transfers: [],\n        page: 0,\n        size: 10,\n        totalElements: 0,\n        totalPages: 0,\n        last: true,\n        isLoadingTransfers: false\n      });\n      this.loadTransfersList();\n    }*\n  }\n\n  handleLoadMore() {\n    this.loadTransfersList(this.state.page + 1);\n  }\n\n  loadTransfersList(page = 0, size = TRANSFER_LIST_SIZE) {\n    let promise;\n\n    promise = getAllTransfers();//getUserCreatedTransfers(this.props.currentUser.username, page, size);\n\n    if(!promise) {\n      return;\n    }\n\n    this.setState({\n      isLoadingTransfers: true\n    });\n\n    promise\n        .then(response => {\n          this.setState({\n            transfers: response,/*response.content\n            page: response.page,\n            size: response.size,\n            totalElements: response.totalElements,\n            totalPages: response.totalPages,\n            last: response.last,*\n            isLoadingTransfers: false\n          })\n        }).catch(error => {\n      this.setState({\n        isLoadingTransfers: false\n      })\n    });\n\n  }\n\n  handleCancelTransfer(id) {\n    MySwal.fire({\n      buttonsStyling:false,\n      customClass: {\n        confirmButton: 'btn btn-success',\n        cancelButton: 'btn btn-danger',\n      },\n      title: 'Entrer votre motif',\n      input: 'textarea',\n      inputPlaceholder: 'Votre motif ...',\n      showCancelButton: true,\n      confirmButtonText: 'Confirmer',\n      cancelButtonText: 'Annuler'\n    }).then((result) => {\n      if (result.value) {\n        let reason = result.value;\n        cancelTransfer(id, reason)\n            .then(response => {\n\n              /*return *MySwal.fire({\n                type: 'success',\n                title: 'Votre operation a été enregistrée',\n                showConfirmButton: false,\n                timer: 1500\n              });\n              this.loadTransfersList();\n            }).catch(error => {\n          if(error.status === 401) {\n            MySwal.fire({\n              type: 'error',\n              title: 'Vous avez été déconnecté. Veuillez vous connecter pour effectuer cette opération.',\n              showConfirmButton: false,\n              timer: 1500\n            });\n            this.props.history.push('/login');\n          } else {\n            MySwal.fire({\n              type: 'warning',\n              title: error.message || 'Pardon! Quelque chose s\\'est mal passé. Veuillez réessayer!',\n              showConfirmButton: false,\n              timer: 1500\n            })\n          }\n        });\n      }\n    })\n  }\n\n  handleAcceptTransfer(id) {\n    acceptTransfer(id)\n        .then(response => {\n\n          /*return *MySwal.fire({\n            type: 'success',\n            title: 'Votre operation a été enregistrée',\n            showConfirmButton: false,\n            timer: 1500\n          });\n          this.loadTransfersList();\n        }).catch(error => {\n      if(error.status === 401) {\n        MySwal.fire({\n          type: 'error',\n          title: 'Vous avez été déconnecté. Veuillez vous connecter pour effectuer cette opération.',\n          showConfirmButton: false,\n          timer: 1500\n        });\n        this.props.history.push('/login');\n      } else {\n        MySwal.fire({\n          type: 'warning',\n          title: error.message || 'Pardon! Quelque chose s\\'est mal passé. Veuillez réessayer!',\n          showConfirmButton: false,\n          timer: 1500\n        });\n      }\n    });\n  }\n\n  handleSendTransfer(id) {\n    sendTransfer(id)\n        .then(response => {\n\n          /*return *MySwal.fire({\n            type: 'success',\n            title: 'Votre operation a été enregistrée',\n            showConfirmButton: false,\n            timer: 1500\n          });\n          this.loadTransfersList();\n        }).catch(error => {\n      if(error.status === 401) {\n        MySwal.fire({\n          type: 'error',\n          title: 'Vous avez été déconnecté. Veuillez vous connecter pour effectuer cette opération.',\n          showConfirmButton: false,\n          timer: 1500\n        });\n        this.props.history.push('/login');\n      } else {\n        MySwal.fire({\n          type: 'warning',\n          title: error.message || 'Pardon! Quelque chose s\\'est mal passé. Veuillez réessayer!',\n          showConfirmButton: false,\n          timer: 1500\n        });\n      }\n    });\n  }\n\n  renderSwitch(state, link) {\n    switch(state) {\n      case 'accepted':\n        return <><Link to={link}><Button className=\"btn-link\" color=\"success\">Validée</Button></Link>\n          {` `}<Button className=\"btn-icon btn-simple\" onClick={this.handleCancelTransfer} style={{border:0}} color=\"primary\" size=\"sm\">\n            <i className=\"fa fa-times\" />\n          </Button>\n        </>;\n      case 'in_progress':\n        return <><Link to={link}><Button className=\"btn-link\" color=\"warning\">Encours</Button></Link>\n              {` `}<Button className=\"btn-icon btn-simple\" onClick={this.handleCancelTransfer} style={{border:0}} color=\"primary\" size=\"sm\">\n                <i className=\"fa fa-times\" />\n              </Button>\n            </>;\n      case 'cancelled':\n        return <><Link to={link}><Button className=\"btn-link\" color=\"danger\">Rejetée</Button></Link>\n          {` `}<Button className=\"btn-icon btn-simple\" onClick={this.handleCancelTransfer} style={{border:0}} color=\"primary\" size=\"sm\">\n          <i className=\"fa fa-times\" />\n        </Button>\n        </>;\n      default:\n        return null;\n    }\n  }\n\n  renderBtnCTN(link) {\n    return(\n        <>\n          <Button className=\"btn-icon btn-simple\" onClick={this.handleAcceptTransfer} style={{border:0}} color=\"primary\" size=\"sm\">\n            <i className=\"fa fa-check\"></i>\n          </Button>{` `}\n          <Button className=\"btn-icon btn-simple\" onClick={this.handleCancelTransfer} style={{border:0}} color=\"primary\" size=\"sm\">\n            <i className=\"fa fa-times\" />\n          </Button>{` `}\n          <Link to={link}><Button className=\"btn-icon btn-simple\" style={{border:0}} color=\"primary\" size=\"sm\">\n            <i className=\"fa fa-eye\"></i>\n          </Button></Link>\n        </>\n    );\n  }\n\n  renderBtnCTRL(link) {\n    return(\n        <>\n          {this.renderBtnCTN(link)}\n          {` `}\n          <Button className=\"btn-icon btn-simple\" onClick={this.handleSendTransfer} style={{border:0}} color=\"primary\" size=\"sm\">\n            <i className=\"fa fa-paper-plane\"></i>\n          </Button>\n        </>\n    );\n  }\n\n  render() {\n    const { isLoadingTransfers, transfers } = this.state;\n    if(isLoadingTransfers) {\n      return <LoadingIndicator />;\n    }\n\n    if(this.state.notFound || !this.props.currentUser) {\n      return <NotFound />;\n    }\n\n    /*if(this.state.serverError) {\n      return <ServerError />;\n    }*\n    return (\n        <>\n          <div className=\"content\">\n            <Row>\n              <Col md=\"12\">\n                <Card>\n                  <CardHeader>\n                    <CardTitle tag=\"h4\">Mes virements</CardTitle>\n                  </CardHeader>\n                  <CardBody>\n                    <Table className=\"tablesorter\" responsive>\n                      <thead className=\"text-primary\">\n                      <tr>\n                        <th>Référence</th>\n                        <th>Date d'opération</th>\n                        <th>Donneur d’ordre</th>\n                        <th>Bénéficiaire</th>\n                        <th className=\"text-center\">Montant</th>\n                        <th className=\"text-center\">état/Action</th>\n                      </tr>\n                      </thead>\n                      <tbody>\n                      {transfers.map((transfer, key) => {\n                        return (\n                            <tr key={key}>\n                              <td>{transfer.ref}</td>\n                              <td>{formatDateTime(transfer.executionDate)}</td>\n                              <td>{transfer.principalAccount}</td>\n                              <td>{transfer.beneficiaryAccount}</td>\n                              <td className=\"text-center\">{transfer.transactionAmount}</td>\n                              <td className=\"text-center\">\n                                {this.props.currentUser.role===\"ROLE_AGENT\"?this.renderSwitch(transfer.state,\"/user/transfers/\"+transfer.id):null}\n                                {this.props.currentUser.role===\"ROLE_CTN\"?this.renderBtnCTN(\"/user/transfers/\"+transfer.id):null}\n                                {this.props.currentUser.role===\"ROLE_CTRL\"?this.renderBtnCTRL(\"/user/transfers/\"+transfer.id):null}\n                              </td>\n                            </tr>\n                        );\n                      })}\n                      </tbody>\n                    </Table>\n                  </CardBody>\n                </Card>\n              </Col>\n            </Row>\n          </div>\n        </>\n    );\n  }\n}\n\nconst mapStateToProps = (state) =>{\n  return {\n    currentUser: state.currentUser\n  };\n};\n\nexport default connect(mapStateToProps, { getCurrentUser })(TransfersTable);\n\n*/\nimport React from \"react\";\nimport _ from \"lodash\";\nimport { makeData } from \"./Utils\"; // Import React Table\n\nimport ReactTable from \"react-table\";\nimport \"react-table/react-table.css\";\nvar rawData = makeData();\n\nvar requestData = function requestData(pageSize, page, sorted, filtered) {\n  return new Promise(function (resolve, reject) {\n    // You can retrieve your data however you want, in this case, we will just use some local data.\n    var filteredData = rawData; // You can use the filters in your request, but you are responsible for applying them.\n\n    if (filtered.length) {\n      filteredData = filtered.reduce(function (filteredSoFar, nextFilter) {\n        return filteredSoFar.filter(function (row) {\n          return (row[nextFilter.id] + \"\").includes(nextFilter.value);\n        });\n      }, filteredData);\n    } // You can also use the sorting in your request, but again, you are responsible for applying it.\n\n\n    var sortedData = _.orderBy(filteredData, sorted.map(function (sort) {\n      return function (row) {\n        if (row[sort.id] === null || row[sort.id] === undefined) {\n          return -Infinity;\n        }\n\n        return typeof row[sort.id] === \"string\" ? row[sort.id].toLowerCase() : row[sort.id];\n      };\n    }), sorted.map(function (d) {\n      return d.desc ? \"desc\" : \"asc\";\n    })); // You must return an object containing the rows of the current page, and optionally the total pages number.\n\n\n    var res = {\n      rows: sortedData.slice(pageSize * page, pageSize * page + pageSize),\n      pages: Math.ceil(filteredData.length / pageSize)\n    }; // Here we'll simulate a server response with 500ms of delay.\n\n    setTimeout(function () {\n      return resolve(res);\n    }, 500);\n  });\n};\n\nvar Table =\n/*#__PURE__*/\nfunction (_React$Component) {\n  _inherits(Table, _React$Component);\n\n  function Table() {\n    var _this;\n\n    _classCallCheck(this, Table);\n\n    _this = _possibleConstructorReturn(this, _getPrototypeOf(Table).call(this));\n    _this.state = {\n      data: [],\n      pages: null,\n      loading: true\n    };\n    _this.fetchData = _this.fetchData.bind(_assertThisInitialized(_assertThisInitialized(_this)));\n    return _this;\n  }\n\n  _createClass(Table, [{\n    key: \"fetchData\",\n    value: function fetchData(state, instance) {\n      var _this2 = this;\n\n      // Whenever the table model changes, or the user sorts or changes pages, this method gets called and passed the current table model.\n      // You can set the `loading` prop of the table to true to use the built-in one or show you're own loading bar if you want.\n      this.setState({\n        loading: true\n      }); // Request the data however you want.  Here, we'll use our mocked service we created earlier\n\n      requestData(state.pageSize, state.page, state.sorted, state.filtered).then(function (res) {\n        // Now just get the rows of data to your React Table (and update anything else like total pages or loading)\n        _this2.setState({\n          data: res.rows,\n          pages: res.pages,\n          loading: false\n        });\n      });\n    }\n  }, {\n    key: \"render\",\n    value: function render() {\n      var _this$state = this.state,\n          data = _this$state.data,\n          pages = _this$state.pages,\n          loading = _this$state.loading;\n      return React.createElement(\"div\", {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 429\n        },\n        __self: this\n      }, React.createElement(ReactTable, {\n        columns: [{\n          Header: \"First Name\",\n          accessor: \"firstName\"\n        }, {\n          Header: \"Last Name\",\n          id: \"lastName\",\n          accessor: function accessor(d) {\n            return d.lastName;\n          }\n        }, {\n          Header: \"Age\",\n          accessor: \"age\"\n        }],\n        manual: true // Forces table not to paginate or sort automatically, so we can handle it server-side\n        ,\n        data: data,\n        pages: pages // Display the total number of pages\n        ,\n        loading: loading // Display the loading overlay when we need it\n        ,\n        onFetchData: this.fetchData // Request new data when things change\n        ,\n        filterable: true,\n        defaultPageSize: 10,\n        className: \"-striped -highlight\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 430\n        },\n        __self: this\n      }));\n    }\n  }]);\n\n  return Table;\n}(React.Component);\n\nexport default Table;","map":{"version":3,"sources":["/Users/geekh04/workspace/BCP/bcp-transactionMDP-client/src/views/User/Transfer/TransfersTable3.jsx"],"names":["React","_","makeData","ReactTable","rawData","requestData","pageSize","page","sorted","filtered","Promise","resolve","reject","filteredData","length","reduce","filteredSoFar","nextFilter","filter","row","id","includes","value","sortedData","orderBy","map","sort","undefined","Infinity","toLowerCase","d","desc","res","rows","slice","pages","Math","ceil","setTimeout","Table","state","data","loading","fetchData","bind","instance","setState","then","Header","accessor","lastName","Component"],"mappings":"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","sourcesContent":["/*import React from \"react\";\nimport { Link } from \"react-router-dom\";\n// reactstrap components\nimport {\n  Card,\n  CardHeader,\n  CardBody,\n  CardTitle,\n  Table,\n  Row,\n  Col,\n  Button\n} from \"reactstrap\";\n\nimport { connect } from \"react-redux\";\nimport { getCurrentUser } from \"../../../redux/actions\";\n// Sweet alert\nimport Swal from \"sweetalert2\";\nimport withReactContent from \"sweetalert2-react-content\";\n\nimport {TRANSFER_LIST_SIZE} from \"../../../variables/constants\";\nimport { getAllTransfers, cancelTransfer, acceptTransfer, sendTransfer} from \"../../../util/APIUtils\";\nimport NotFound from \"./TransferPage\";\nimport {formatDateTime} from \"../../../util/Helpers\";\nimport LoadingIndicator from \"../../../components/LoadingIndicator/LoadingIndicator\";\n\n\nconst MySwal = withReactContent(Swal);\n\nclass TransfersTable extends React.Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      transfers: [],\n      page: 0,\n      size: 10,\n      totalElements: 0,\n      totalPages: 0,\n      last: true,\n      isLoadingTransfers: true\n    };\n    this.loadTransfersList = this.loadTransfersList.bind(this);\n    this.handleLoadMore = this.handleLoadMore.bind(this);\n    this.handleCancelTransfer = this.handleCancelTransfer.bind(this);\n    this.handleAcceptTransfer = this.handleAcceptTransfer.bind(this);\n    this.handleSendTransfer = this.handleSendTransfer.bind(this);\n  }\n\n  componentDidMount() {\n    this.props.getCurrentUser();\n    /*************************************************\n    //const username = this.props.match.params.username;\n    this.loadTransfersList();\n  }\n\n  componentDidUpdate(nextProps) {\n    /*if(this.props.isAuthenticated !== nextProps.isAuthenticated) {\n      // Reset State\n      this.setState({\n        transfers: [],\n        page: 0,\n        size: 10,\n        totalElements: 0,\n        totalPages: 0,\n        last: true,\n        isLoadingTransfers: false\n      });\n      this.loadTransfersList();\n    }*\n  }\n\n  handleLoadMore() {\n    this.loadTransfersList(this.state.page + 1);\n  }\n\n  loadTransfersList(page = 0, size = TRANSFER_LIST_SIZE) {\n    let promise;\n\n    promise = getAllTransfers();//getUserCreatedTransfers(this.props.currentUser.username, page, size);\n\n    if(!promise) {\n      return;\n    }\n\n    this.setState({\n      isLoadingTransfers: true\n    });\n\n    promise\n        .then(response => {\n          this.setState({\n            transfers: response,/*response.content\n            page: response.page,\n            size: response.size,\n            totalElements: response.totalElements,\n            totalPages: response.totalPages,\n            last: response.last,*\n            isLoadingTransfers: false\n          })\n        }).catch(error => {\n      this.setState({\n        isLoadingTransfers: false\n      })\n    });\n\n  }\n\n  handleCancelTransfer(id) {\n    MySwal.fire({\n      buttonsStyling:false,\n      customClass: {\n        confirmButton: 'btn btn-success',\n        cancelButton: 'btn btn-danger',\n      },\n      title: 'Entrer votre motif',\n      input: 'textarea',\n      inputPlaceholder: 'Votre motif ...',\n      showCancelButton: true,\n      confirmButtonText: 'Confirmer',\n      cancelButtonText: 'Annuler'\n    }).then((result) => {\n      if (result.value) {\n        let reason = result.value;\n        cancelTransfer(id, reason)\n            .then(response => {\n\n              /*return *MySwal.fire({\n                type: 'success',\n                title: 'Votre operation a été enregistrée',\n                showConfirmButton: false,\n                timer: 1500\n              });\n              this.loadTransfersList();\n            }).catch(error => {\n          if(error.status === 401) {\n            MySwal.fire({\n              type: 'error',\n              title: 'Vous avez été déconnecté. Veuillez vous connecter pour effectuer cette opération.',\n              showConfirmButton: false,\n              timer: 1500\n            });\n            this.props.history.push('/login');\n          } else {\n            MySwal.fire({\n              type: 'warning',\n              title: error.message || 'Pardon! Quelque chose s\\'est mal passé. Veuillez réessayer!',\n              showConfirmButton: false,\n              timer: 1500\n            })\n          }\n        });\n      }\n    })\n  }\n\n  handleAcceptTransfer(id) {\n    acceptTransfer(id)\n        .then(response => {\n\n          /*return *MySwal.fire({\n            type: 'success',\n            title: 'Votre operation a été enregistrée',\n            showConfirmButton: false,\n            timer: 1500\n          });\n          this.loadTransfersList();\n        }).catch(error => {\n      if(error.status === 401) {\n        MySwal.fire({\n          type: 'error',\n          title: 'Vous avez été déconnecté. Veuillez vous connecter pour effectuer cette opération.',\n          showConfirmButton: false,\n          timer: 1500\n        });\n        this.props.history.push('/login');\n      } else {\n        MySwal.fire({\n          type: 'warning',\n          title: error.message || 'Pardon! Quelque chose s\\'est mal passé. Veuillez réessayer!',\n          showConfirmButton: false,\n          timer: 1500\n        });\n      }\n    });\n  }\n\n  handleSendTransfer(id) {\n    sendTransfer(id)\n        .then(response => {\n\n          /*return *MySwal.fire({\n            type: 'success',\n            title: 'Votre operation a été enregistrée',\n            showConfirmButton: false,\n            timer: 1500\n          });\n          this.loadTransfersList();\n        }).catch(error => {\n      if(error.status === 401) {\n        MySwal.fire({\n          type: 'error',\n          title: 'Vous avez été déconnecté. Veuillez vous connecter pour effectuer cette opération.',\n          showConfirmButton: false,\n          timer: 1500\n        });\n        this.props.history.push('/login');\n      } else {\n        MySwal.fire({\n          type: 'warning',\n          title: error.message || 'Pardon! Quelque chose s\\'est mal passé. Veuillez réessayer!',\n          showConfirmButton: false,\n          timer: 1500\n        });\n      }\n    });\n  }\n\n  renderSwitch(state, link) {\n    switch(state) {\n      case 'accepted':\n        return <><Link to={link}><Button className=\"btn-link\" color=\"success\">Validée</Button></Link>\n          {` `}<Button className=\"btn-icon btn-simple\" onClick={this.handleCancelTransfer} style={{border:0}} color=\"primary\" size=\"sm\">\n            <i className=\"fa fa-times\" />\n          </Button>\n        </>;\n      case 'in_progress':\n        return <><Link to={link}><Button className=\"btn-link\" color=\"warning\">Encours</Button></Link>\n              {` `}<Button className=\"btn-icon btn-simple\" onClick={this.handleCancelTransfer} style={{border:0}} color=\"primary\" size=\"sm\">\n                <i className=\"fa fa-times\" />\n              </Button>\n            </>;\n      case 'cancelled':\n        return <><Link to={link}><Button className=\"btn-link\" color=\"danger\">Rejetée</Button></Link>\n          {` `}<Button className=\"btn-icon btn-simple\" onClick={this.handleCancelTransfer} style={{border:0}} color=\"primary\" size=\"sm\">\n          <i className=\"fa fa-times\" />\n        </Button>\n        </>;\n      default:\n        return null;\n    }\n  }\n\n  renderBtnCTN(link) {\n    return(\n        <>\n          <Button className=\"btn-icon btn-simple\" onClick={this.handleAcceptTransfer} style={{border:0}} color=\"primary\" size=\"sm\">\n            <i className=\"fa fa-check\"></i>\n          </Button>{` `}\n          <Button className=\"btn-icon btn-simple\" onClick={this.handleCancelTransfer} style={{border:0}} color=\"primary\" size=\"sm\">\n            <i className=\"fa fa-times\" />\n          </Button>{` `}\n          <Link to={link}><Button className=\"btn-icon btn-simple\" style={{border:0}} color=\"primary\" size=\"sm\">\n            <i className=\"fa fa-eye\"></i>\n          </Button></Link>\n        </>\n    );\n  }\n\n  renderBtnCTRL(link) {\n    return(\n        <>\n          {this.renderBtnCTN(link)}\n          {` `}\n          <Button className=\"btn-icon btn-simple\" onClick={this.handleSendTransfer} style={{border:0}} color=\"primary\" size=\"sm\">\n            <i className=\"fa fa-paper-plane\"></i>\n          </Button>\n        </>\n    );\n  }\n\n  render() {\n    const { isLoadingTransfers, transfers } = this.state;\n    if(isLoadingTransfers) {\n      return <LoadingIndicator />;\n    }\n\n    if(this.state.notFound || !this.props.currentUser) {\n      return <NotFound />;\n    }\n\n    /*if(this.state.serverError) {\n      return <ServerError />;\n    }*\n    return (\n        <>\n          <div className=\"content\">\n            <Row>\n              <Col md=\"12\">\n                <Card>\n                  <CardHeader>\n                    <CardTitle tag=\"h4\">Mes virements</CardTitle>\n                  </CardHeader>\n                  <CardBody>\n                    <Table className=\"tablesorter\" responsive>\n                      <thead className=\"text-primary\">\n                      <tr>\n                        <th>Référence</th>\n                        <th>Date d'opération</th>\n                        <th>Donneur d’ordre</th>\n                        <th>Bénéficiaire</th>\n                        <th className=\"text-center\">Montant</th>\n                        <th className=\"text-center\">état/Action</th>\n                      </tr>\n                      </thead>\n                      <tbody>\n                      {transfers.map((transfer, key) => {\n                        return (\n                            <tr key={key}>\n                              <td>{transfer.ref}</td>\n                              <td>{formatDateTime(transfer.executionDate)}</td>\n                              <td>{transfer.principalAccount}</td>\n                              <td>{transfer.beneficiaryAccount}</td>\n                              <td className=\"text-center\">{transfer.transactionAmount}</td>\n                              <td className=\"text-center\">\n                                {this.props.currentUser.role===\"ROLE_AGENT\"?this.renderSwitch(transfer.state,\"/user/transfers/\"+transfer.id):null}\n                                {this.props.currentUser.role===\"ROLE_CTN\"?this.renderBtnCTN(\"/user/transfers/\"+transfer.id):null}\n                                {this.props.currentUser.role===\"ROLE_CTRL\"?this.renderBtnCTRL(\"/user/transfers/\"+transfer.id):null}\n                              </td>\n                            </tr>\n                        );\n                      })}\n                      </tbody>\n                    </Table>\n                  </CardBody>\n                </Card>\n              </Col>\n            </Row>\n          </div>\n        </>\n    );\n  }\n}\n\nconst mapStateToProps = (state) =>{\n  return {\n    currentUser: state.currentUser\n  };\n};\n\nexport default connect(mapStateToProps, { getCurrentUser })(TransfersTable);\n\n*/\n\n\n\n\nimport React from \"react\";\nimport _ from \"lodash\";\nimport { makeData } from \"./Utils\";\n\n// Import React Table\nimport ReactTable from \"react-table\";\nimport \"react-table/react-table.css\";\n\nconst rawData = makeData();\n\nconst requestData = (pageSize, page, sorted, filtered) => {\n  return new Promise((resolve, reject) => {\n    // You can retrieve your data however you want, in this case, we will just use some local data.\n    let filteredData = rawData;\n\n    // You can use the filters in your request, but you are responsible for applying them.\n    if (filtered.length) {\n      filteredData = filtered.reduce((filteredSoFar, nextFilter) => {\n        return filteredSoFar.filter(row => {\n          return (row[nextFilter.id] + \"\").includes(nextFilter.value);\n        });\n      }, filteredData);\n    }\n    // You can also use the sorting in your request, but again, you are responsible for applying it.\n    const sortedData = _.orderBy(\n        filteredData,\n        sorted.map(sort => {\n          return row => {\n            if (row[sort.id] === null || row[sort.id] === undefined) {\n              return -Infinity;\n            }\n            return typeof row[sort.id] === \"string\"\n                ? row[sort.id].toLowerCase()\n                : row[sort.id];\n          };\n        }),\n        sorted.map(d => (d.desc ? \"desc\" : \"asc\"))\n    );\n\n    // You must return an object containing the rows of the current page, and optionally the total pages number.\n    const res = {\n      rows: sortedData.slice(pageSize * page, pageSize * page + pageSize),\n      pages: Math.ceil(filteredData.length / pageSize)\n    };\n\n    // Here we'll simulate a server response with 500ms of delay.\n    setTimeout(() => resolve(res), 500);\n  });\n};\n\nclass Table extends React.Component {\n  constructor() {\n    super();\n    this.state = {\n      data: [],\n      pages: null,\n      loading: true\n    };\n    this.fetchData = this.fetchData.bind(this);\n  }\n  fetchData(state, instance) {\n    // Whenever the table model changes, or the user sorts or changes pages, this method gets called and passed the current table model.\n    // You can set the `loading` prop of the table to true to use the built-in one or show you're own loading bar if you want.\n    this.setState({ loading: true });\n    // Request the data however you want.  Here, we'll use our mocked service we created earlier\n    requestData(\n        state.pageSize,\n        state.page,\n        state.sorted,\n        state.filtered\n    ).then(res => {\n      // Now just get the rows of data to your React Table (and update anything else like total pages or loading)\n      this.setState({\n        data: res.rows,\n        pages: res.pages,\n        loading: false\n      });\n    });\n  }\n  render() {\n    const { data, pages, loading } = this.state;\n    return (\n        <div>\n          <ReactTable\n              columns={[\n                {\n                  Header: \"First Name\",\n                  accessor: \"firstName\"\n                },\n                {\n                  Header: \"Last Name\",\n                  id: \"lastName\",\n                  accessor: d => d.lastName\n                },\n                {\n                  Header: \"Age\",\n                  accessor: \"age\"\n                }\n              ]}\n              manual // Forces table not to paginate or sort automatically, so we can handle it server-side\n              data={data}\n              pages={pages} // Display the total number of pages\n              loading={loading} // Display the loading overlay when we need it\n              onFetchData={this.fetchData} // Request new data when things change\n              filterable\n              defaultPageSize={10}\n              className=\"-striped -highlight\"\n          />\n        </div>\n    );\n  }\n}\n\nexport default Table;\n"]},"metadata":{},"sourceType":"module"}