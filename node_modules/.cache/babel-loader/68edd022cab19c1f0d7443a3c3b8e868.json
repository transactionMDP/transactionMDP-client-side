{"ast":null,"code":"import _classCallCheck from \"/Users/geekh04/workspace/BCP/bcp-transactionMDP-client/node_modules/@babel/runtime/helpers/esm/classCallCheck\";\nimport _createClass from \"/Users/geekh04/workspace/BCP/bcp-transactionMDP-client/node_modules/@babel/runtime/helpers/esm/createClass\";\nimport _possibleConstructorReturn from \"/Users/geekh04/workspace/BCP/bcp-transactionMDP-client/node_modules/@babel/runtime/helpers/esm/possibleConstructorReturn\";\nimport _getPrototypeOf from \"/Users/geekh04/workspace/BCP/bcp-transactionMDP-client/node_modules/@babel/runtime/helpers/esm/getPrototypeOf\";\nimport _inherits from \"/Users/geekh04/workspace/BCP/bcp-transactionMDP-client/node_modules/@babel/runtime/helpers/esm/inherits\";\nimport _assertThisInitialized from \"/Users/geekh04/workspace/BCP/bcp-transactionMDP-client/node_modules/@babel/runtime/helpers/esm/assertThisInitialized\";\nimport _objectWithoutProperties from \"/Users/geekh04/workspace/BCP/bcp-transactionMDP-client/node_modules/@babel/runtime/helpers/esm/objectWithoutProperties\";\nvar _jsxFileName = \"/Users/geekh04/workspace/BCP/bcp-transactionMDP-client/src/layouts/Admin/Dashboard.jsx\";\nimport React from \"react\";\nimport { Route, Switch } from \"react-router-dom\"; // javascript plugin used to create scrollbars on windows\n\nimport PerfectScrollbar from \"perfect-scrollbar\";\nimport { getCurrentUser } from \"../../util/APIUtils\"; // core components\n\nimport AdminNavbar from \"components/Navbars/AdminNavbar.jsx\"; //import Footer from \"components/Footer/Footer.jsx\";\n//import Sidebar from \"components/Sidebar/Sidebar.jsx\";\n//import dashboardRoutesAdmin from \"routes/dashboardAdmin.jsx\";\n//import dashboardRoutesUser from \"routes/dashboardUser.jsx\";\n//import logo from \"assets/img/react-logo.png\";\n//import NotFound from \"../../views/NotFound\";\n\nvar ps;\n\nvar MyRoute = function MyRoute(_ref) {\n  var Component = _ref.component,\n      rest = _objectWithoutProperties(_ref, [\"component\"]);\n\n  return React.createElement(Route, Object.assign({}, rest, {\n    render: function render(props) {\n      return React.createElement(Component, Object.assign({}, rest, props, {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 22\n        },\n        __self: this\n      }));\n    },\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 22\n    },\n    __self: this\n  }));\n};\n\nvar Dashboard =\n/*#__PURE__*/\nfunction (_React$Component) {\n  _inherits(Dashboard, _React$Component);\n\n  function Dashboard(props) {\n    var _this;\n\n    _classCallCheck(this, Dashboard);\n\n    _this = _possibleConstructorReturn(this, _getPrototypeOf(Dashboard).call(this, props));\n    _this.state = {\n      user: null,\n      currentUser: _this.props.currentUser,\n      isLoading: true,\n      backgroundColor: \"primary\",\n      sidebarOpened: document.documentElement.className.indexOf(\"nav-open\") !== -1\n    };\n    _this.loadUserProfile = _this.loadUserProfile.bind(_assertThisInitialized(_assertThisInitialized(_this)));\n    return _this;\n  }\n  /*\n  loadUserProfile() {\n   this.setState({\n     isLoading: true\n   });\n    getCurrentUser()\n       .then(response => {\n         this.setState({\n           user: response,\n           isLoading: false\n         });\n       }).catch(error => {\n     if(error.status === 404) {\n       this.setState({\n         notFound: true,\n         isLoading: false\n       });\n     } else {\n       this.setState({\n         serverError: true,\n         isLoading: false\n       });\n     }\n   });\n  }\n  componentDidMount() {\n   if (navigator.platform.indexOf(\"Win\") > -1) {\n     document.documentElement.className += \" perfect-scrollbar-on\";\n     document.documentElement.classList.remove(\"perfect-scrollbar-off\");\n     ps = new PerfectScrollbar(this.refs.mainPanel, { suppressScrollX: true });\n     let tables = document.querySelectorAll(\".table-responsive\");\n     for (let i = 0; i < tables.length; i++) {\n       ps = new PerfectScrollbar(tables[i]);\n     }\n   }\n   this.loadUserProfile();\n  }\n  componentWillUnmount() {\n   if (navigator.platform.indexOf(\"Win\") > -1) {\n     ps.destroy();\n     document.documentElement.className += \" perfect-scrollbar-off\";\n     document.documentElement.classList.remove(\"perfect-scrollbar-on\");\n   }\n  }\n  componentDidUpdate(e) {\n   if (e.history.action === \"PUSH\") {\n     if (navigator.platform.indexOf(\"Win\") > -1) {\n       let tables = document.querySelectorAll(\".table-responsive\");\n       for (let i = 0; i < tables.length; i++) {\n         ps = new PerfectScrollbar(tables[i]);\n       }\n     }\n     document.documentElement.scrollTop = 0;\n     document.scrollingElement.scrollTop = 0;\n     this.refs.mainPanel.scrollTop = 0;\n   }\n   //this.loadUserProfile();\n  }\n  // this function opens and closes the sidebar on small devices\n  handleToggleSidebar = () => {\n   document.documentElement.classList.toggle(\"nav-open\");\n   this.setState({ sidebarOpened: !this.state.sidebarOpened });\n  };\n  getRoutes = routes => {\n   return routes.map((prop, key) => {\n     if (prop.layout === \"/user\" || prop.layout === \"/admin\") {\n       return (\n           <MyRoute path={prop.layout + prop.path} component={prop.component} handleLogout={this.props.handleLogout} notify={(place,type,message)=>this.props.notify(place,type,message)}  key={key} />\n     );\n     } else {\n       return <Route component={NotFound} key={key} />;\n     }\n   });\n  };\n  handleBgClick = color => {\n   this.setState({ backgroundColor: color });\n  };*/\n\n\n  _createClass(Dashboard, [{\n    key: \"render\",\n    value: function render() {\n      //let dashboardRoutes = this.props.currentUser.role===\"ROLE_USER\"?(dashboardRoutesUser):(dashboardRoutesAdmin);\n      //let dashboardRoutes = dashboardRoutesUser;\n      return React.createElement(React.Fragment, null);\n    }\n  }]);\n\n  return Dashboard;\n}(React.Component);\n\nexport default Dashboard;","map":{"version":3,"sources":["/Users/geekh04/workspace/BCP/bcp-transactionMDP-client/src/layouts/Admin/Dashboard.jsx"],"names":["React","Route","Switch","PerfectScrollbar","getCurrentUser","AdminNavbar","ps","MyRoute","Component","component","rest","props","Dashboard","state","user","currentUser","isLoading","backgroundColor","sidebarOpened","document","documentElement","className","indexOf","loadUserProfile","bind"],"mappings":";;;;;;;;AAAA,OAAOA,KAAP,MAAkB,OAAlB;AACA,SAASC,KAAT,EAAgBC,MAAhB,QAA6B,kBAA7B,C,CACA;;AACA,OAAOC,gBAAP,MAA6B,mBAA7B;AAEA,SAAQC,cAAR,QAA6B,qBAA7B,C,CAEA;;AACA,OAAOC,WAAP,MAAwB,oCAAxB,C,CACA;AACA;AAEA;AACA;AAEA;AACA;;AAEA,IAAIC,EAAJ;;AAEA,IAAMC,OAAO,GAAG,SAAVA,OAAU;AAAA,MAAcC,SAAd,QAAGC,SAAH;AAAA,MAA4BC,IAA5B;;AAAA,SACZ,oBAAC,KAAD,oBAAWA,IAAX;AAAiB,IAAA,MAAM,EAAE,gBAAAC,KAAK;AAAA,aAAI,oBAAC,SAAD,oBAAeD,IAAf,EAAyBC,KAAzB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,SAAJ;AAAA,KAA9B;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KADY;AAAA,CAAhB;;IAIMC,S;;;;;AACJ,qBAAYD,KAAZ,EAAmB;AAAA;;AAAA;;AACjB,mFAAMA,KAAN;AACA,UAAKE,KAAL,GAAa;AACXC,MAAAA,IAAI,EAAE,IADK;AAEXC,MAAAA,WAAW,EAAE,MAAKJ,KAAL,CAAWI,WAFb;AAGXC,MAAAA,SAAS,EAAE,IAHA;AAIXC,MAAAA,eAAe,EAAE,SAJN;AAKXC,MAAAA,aAAa,EACTC,QAAQ,CAACC,eAAT,CAAyBC,SAAzB,CAAmCC,OAAnC,CAA2C,UAA3C,MAA2D,CAAC;AANrD,KAAb;AAQA,UAAKC,eAAL,GAAuB,MAAKA,eAAL,CAAqBC,IAArB,uDAAvB;AAViB;AAWlB;AAAA;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;6BAiFQ;AACP;AACA;AAEA,aACI,yCADJ;AAoCD;;;;EArIqBxB,KAAK,CAACQ,S;;AAwI9B,eAAeI,SAAf","sourcesContent":["import React from \"react\";\nimport { Route, Switch} from \"react-router-dom\";\n// javascript plugin used to create scrollbars on windows\nimport PerfectScrollbar from \"perfect-scrollbar\";\n\nimport {getCurrentUser} from \"../../util/APIUtils\";\n\n// core components\nimport AdminNavbar from \"components/Navbars/AdminNavbar.jsx\";\n//import Footer from \"components/Footer/Footer.jsx\";\n//import Sidebar from \"components/Sidebar/Sidebar.jsx\";\n\n//import dashboardRoutesAdmin from \"routes/dashboardAdmin.jsx\";\n//import dashboardRoutesUser from \"routes/dashboardUser.jsx\";\n\n//import logo from \"assets/img/react-logo.png\";\n//import NotFound from \"../../views/NotFound\";\n\nlet ps;\n\nconst MyRoute = ({ component: Component, ...rest }) => (\n    <Route {...rest} render={props => <Component {...rest} {...props}/>}/>\n);\n\nclass Dashboard extends React.Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      user: null,\n      currentUser: this.props.currentUser,\n      isLoading: true,\n      backgroundColor: \"primary\",\n      sidebarOpened:\n          document.documentElement.className.indexOf(\"nav-open\") !== -1\n    };\n    this.loadUserProfile = this.loadUserProfile.bind(this);\n  }/*\n  loadUserProfile() {\n    this.setState({\n      isLoading: true\n    });\n\n    getCurrentUser()\n        .then(response => {\n          this.setState({\n            user: response,\n            isLoading: false\n          });\n        }).catch(error => {\n      if(error.status === 404) {\n        this.setState({\n          notFound: true,\n          isLoading: false\n        });\n      } else {\n        this.setState({\n          serverError: true,\n          isLoading: false\n        });\n      }\n    });\n  }\n  componentDidMount() {\n    if (navigator.platform.indexOf(\"Win\") > -1) {\n      document.documentElement.className += \" perfect-scrollbar-on\";\n      document.documentElement.classList.remove(\"perfect-scrollbar-off\");\n      ps = new PerfectScrollbar(this.refs.mainPanel, { suppressScrollX: true });\n      let tables = document.querySelectorAll(\".table-responsive\");\n      for (let i = 0; i < tables.length; i++) {\n        ps = new PerfectScrollbar(tables[i]);\n      }\n    }\n    this.loadUserProfile();\n  }\n  componentWillUnmount() {\n    if (navigator.platform.indexOf(\"Win\") > -1) {\n      ps.destroy();\n      document.documentElement.className += \" perfect-scrollbar-off\";\n      document.documentElement.classList.remove(\"perfect-scrollbar-on\");\n    }\n  }\n  componentDidUpdate(e) {\n    if (e.history.action === \"PUSH\") {\n      if (navigator.platform.indexOf(\"Win\") > -1) {\n        let tables = document.querySelectorAll(\".table-responsive\");\n        for (let i = 0; i < tables.length; i++) {\n          ps = new PerfectScrollbar(tables[i]);\n        }\n      }\n      document.documentElement.scrollTop = 0;\n      document.scrollingElement.scrollTop = 0;\n      this.refs.mainPanel.scrollTop = 0;\n    }\n    //this.loadUserProfile();\n  }\n  // this function opens and closes the sidebar on small devices\n  handleToggleSidebar = () => {\n    document.documentElement.classList.toggle(\"nav-open\");\n    this.setState({ sidebarOpened: !this.state.sidebarOpened });\n  };\n\n  getRoutes = routes => {\n    return routes.map((prop, key) => {\n      if (prop.layout === \"/user\" || prop.layout === \"/admin\") {\n        return (\n            <MyRoute path={prop.layout + prop.path} component={prop.component} handleLogout={this.props.handleLogout} notify={(place,type,message)=>this.props.notify(place,type,message)}  key={key} />\n      );\n      } else {\n        return <Route component={NotFound} key={key} />;\n      }\n    });\n  };\n\n  handleBgClick = color => {\n    this.setState({ backgroundColor: color });\n  };*/\n\n  render() {\n    //let dashboardRoutes = this.props.currentUser.role===\"ROLE_USER\"?(dashboardRoutesUser):(dashboardRoutesAdmin);\n    //let dashboardRoutes = dashboardRoutesUser;\n\n    return (\n        <>{/*\n          <div className=\"wrapper\">\n            <Sidebar\n                {...this.props}\n                routes={dashboardRoutes}\n                bgColor={this.state.backgroundColor}\n                logo={{\n                  outterLink: \"https://www.bcp.com/\",\n                  text: \"Banque Populaire\",\n                  imgSrc: logo\n                }}\n                toggleSidebar={this.handleToggleSidebar}\n            />\n            <div\n                className=\"main-panel\"\n                ref=\"mainPanel\"\n                data={this.state.backgroundColor}\n            >\n              <AdminNavbar\n                  {...this.props}\n                  routes={dashboardRoutes}\n                  toggleSidebar={this.handleToggleSidebar}\n                  sidebarOpened={this.state.sidebarOpened}\n                  handleLogout={this.props.handleLogout}\n                  history={this.props.history}\n              />\n              <Switch>{this.getRoutes(dashboardRoutes)}</Switch>\n              {// we don't want the Footer to be rendered on map page\n                this.props.location.pathname.indexOf(\"maps\") !== -1 ? null : (\n                    <Footer fluid />\n                )}\n            </div>\n          </div>*/}\n        </>\n    );\n  }\n}\n\nexport default Dashboard;\n"]},"metadata":{},"sourceType":"module"}