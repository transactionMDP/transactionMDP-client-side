{"ast":null,"code":"import { API_BASE_URL, TRANSFER_LIST_SIZE, ACCESS_TOKEN } from '../variables/constants';\n\nvar request = function request(options) {\n  var headers = new Headers({\n    'Content-Type': 'application/json'\n  });\n\n  if (localStorage.getItem(ACCESS_TOKEN)) {\n    headers.append('Authorization', 'Bearer ' + localStorage.getItem(ACCESS_TOKEN));\n  }\n\n  var defaults = {\n    headers: headers\n  };\n  options = Object.assign({}, defaults, options);\n  return fetch(options.url, options).then(function (response) {\n    return response.json().then(function (json) {\n      if (!response.ok) {\n        return Promise.reject(json);\n      }\n\n      return json;\n    });\n  }).catch(function (error) {//alert(error);\n  });\n};\n\nexport function getAllTransfers(page, size) {\n  page = page || 0;\n  size = size || TRANSFER_LIST_SIZE;\n  return request({\n    url: API_BASE_URL + \"/transfers?page=\" + page + \"&size=\" + size,\n    method: 'GET'\n  });\n}\nexport function getUserCreatedTransfers(username, page, size) {\n  page = page || 0;\n  size = size || TRANSFER_LIST_SIZE;\n  return request({\n    url: API_BASE_URL + \"/users/\" + username + \"/transfers?page=\" + page + \"&size=\" + size,\n    method: 'GET'\n  });\n}\nexport function doTransfer(transferData) {\n  return request({\n    url: API_BASE_URL + \"/transfers\",\n    method: 'POST',\n    body: JSON.stringify(transferData)\n  });\n}\nexport function updateTransfer(id, transferRequest) {\n  return request({\n    url: API_BASE_URL + \"/transfers/\" + id,\n    method: 'PUT',\n    body: JSON.stringify(transferRequest)\n  });\n}\nexport function deleteTransfer(id) {\n  return request({\n    url: API_BASE_URL + \"/transfers/\" + id,\n    method: 'DELETE'\n  });\n}\nexport function getTransfer(id) {\n  return request({\n    url: API_BASE_URL + \"/transfers/\" + id,\n    method: 'GET'\n  });\n}\nexport function cancelTransfer(id, reason) {\n  return request({\n    url: API_BASE_URL + \"/canceltransfers/\" + id,\n    method: 'PUT',\n    body: JSON.stringify(reason)\n  });\n}\nexport function acceptTransfer(id) {\n  return request({\n    url: API_BASE_URL + \"/accepttransfers/\" + id,\n    method: 'GET'\n  });\n}\nexport function sendTransfer(id) {\n  return request({\n    url: API_BASE_URL + \"/accepttransfers/\" + id,\n    method: 'GET'\n  });\n}\nexport function getAccountData(id) {\n  return request({\n    url: API_BASE_URL + \"/account/\" + id,\n    method: 'GET'\n  });\n}\nexport function getAccountCurrency(numberAccount) {\n  return request({\n    url: API_BASE_URL + \"/account/stateOrCurrency/\" + numberAccount,\n    method: 'GET' //,\n    //body: JSON.stringify(numberAccount)\n\n  });\n}\nexport function getCommissionData(commissionData) {\n  return request({\n    url: API_BASE_URL + \"/tarification/tarifier\",\n    method: 'POST',\n    body: JSON.stringify(commissionData)\n  });\n}\nexport function login(loginRequest) {\n  return request({\n    url: API_BASE_URL + \"/auth/signin\",\n    method: 'POST',\n    body:\n    /*JSON.stringify(*/\n    loginRequest.data\n    /*)*/\n\n  });\n}\nexport function signup(signupRequest) {\n  return request({\n    url: API_BASE_URL + \"/auth/signup\",\n    method: 'POST',\n    body: JSON.stringify(signupRequest)\n  });\n}\nexport function checkEmailAvailability(email) {\n  return request({\n    url: API_BASE_URL + \"/user/checkEmailAvailability?email=\" + email,\n    method: 'GET'\n  });\n}\n/*export function getCurrentUser() {\n    if(!localStorage.getItem(ACCESS_TOKEN)) {\n        return Promise.reject(\"No access token set.\");\n    }\n\n    return request({\n        url: API_BASE_URL + \"/user/me\",\n        method: 'GET'\n    });\n}*/\n\nexport function getCurrentUser() {\n  /*if(!localStorage.getItem(ACCESS_TOKEN)) {\n      return Promise.reject(\"No access token set.\");\n  }*/\n  return request({\n    url: API_BASE_URL + \"/user\",\n    method: 'GET'\n  });\n}\nexport function getUserProfile(username) {\n  return request({\n    url: API_BASE_URL + \"/users/\" + username,\n    method: 'GET'\n  });\n}\nexport function updateUserProfile(username, userRequest) {\n  return request({\n    url: API_BASE_URL + \"/users/\" + username,\n    method: 'PUT',\n    body: JSON.stringify(userRequest)\n  });\n}\nexport function getStatistics() {\n  return request({\n    url: API_BASE_URL + \"/dashboard\",\n    method: 'GET'\n  });\n}","map":{"version":3,"sources":["/Users/geekh04/workspace/BCP/bcp-transactionMDP-client/src/util/APIUtils.js"],"names":["API_BASE_URL","TRANSFER_LIST_SIZE","ACCESS_TOKEN","request","options","headers","Headers","localStorage","getItem","append","defaults","Object","assign","fetch","url","then","response","json","ok","Promise","reject","catch","error","getAllTransfers","page","size","method","getUserCreatedTransfers","username","doTransfer","transferData","body","JSON","stringify","updateTransfer","id","transferRequest","deleteTransfer","getTransfer","cancelTransfer","reason","acceptTransfer","sendTransfer","getAccountData","getAccountCurrency","numberAccount","getCommissionData","commissionData","login","loginRequest","data","signup","signupRequest","checkEmailAvailability","email","getCurrentUser","getUserProfile","updateUserProfile","userRequest","getStatistics"],"mappings":"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","sourcesContent":["import { API_BASE_URL, TRANSFER_LIST_SIZE, ACCESS_TOKEN } from '../variables/constants';\n\nconst request = (options) => {\n    const headers = new Headers({\n        'Content-Type': 'application/json',\n    });\n    \n    if(localStorage.getItem(ACCESS_TOKEN)) {\n        headers.append('Authorization', 'Bearer ' + localStorage.getItem(ACCESS_TOKEN))\n    }\n\n    const defaults = {headers: headers};\n    options = Object.assign({}, defaults, options);\n\n    return fetch(options.url, options)\n    .then(response =>\n            response.json().then(json => {\n                if(!response.ok) {\n                    return Promise.reject(json);\n                }\n                return json;\n            })\n    ).catch(error => {\n            //alert(error);\n        });\n};\n\nexport function getAllTransfers(page, size) {\n    page = page || 0;\n    size = size || TRANSFER_LIST_SIZE;\n\n    return request({\n        url: API_BASE_URL + \"/transfers?page=\" + page + \"&size=\" + size,\n        method: 'GET'\n    });\n}\n\nexport function getUserCreatedTransfers(username, page, size) {\n    page = page || 0;\n    size = size || TRANSFER_LIST_SIZE;\n\n    return request({\n        url: API_BASE_URL + \"/users/\" + username + \"/transfers?page=\" + page + \"&size=\" + size,\n        method: 'GET'\n    });\n}\n\nexport function doTransfer(transferData) {\n    return request({\n        url: API_BASE_URL + \"/transfers\",\n        method: 'POST',\n        body: JSON.stringify(transferData)\n    });\n}\n\nexport function updateTransfer(id, transferRequest) {\n    return request({\n        url: API_BASE_URL + \"/transfers/\" + id,\n        method: 'PUT',\n        body: JSON.stringify(transferRequest)\n    });\n}\n\nexport function deleteTransfer(id) {\n    return request({\n        url: API_BASE_URL + \"/transfers/\" + id,\n        method: 'DELETE'\n    });\n}\n\nexport function getTransfer(id) {\n    return request({\n        url: API_BASE_URL + \"/transfers/\" + id,\n        method: 'GET'\n    });\n}\n\nexport function cancelTransfer(id,reason) {\n    return request({\n        url: API_BASE_URL + \"/canceltransfers/\" + id,\n        method: 'PUT',\n        body: JSON.stringify(reason)\n    });\n}\n\nexport function acceptTransfer(id) {\n    return request({\n        url: API_BASE_URL + \"/accepttransfers/\" + id,\n        method: 'GET'\n    });\n}\n\nexport function sendTransfer(id) {\n    return request({\n        url: API_BASE_URL + \"/accepttransfers/\" + id,\n        method: 'GET'\n    });\n}\n\n\nexport function getAccountData(id) {\n    return request({\n        url: API_BASE_URL + \"/account/\" + id,\n        method: 'GET'\n    });\n}\n\nexport function getAccountCurrency(numberAccount) {\n    return request({\n        url: API_BASE_URL + \"/account/stateOrCurrency/\"+numberAccount,\n        method: 'GET'//,\n        //body: JSON.stringify(numberAccount)\n    });\n}\n\nexport function getCommissionData(commissionData) {\n    return request({\n        url: API_BASE_URL + \"/tarification/tarifier\",\n        method: 'POST',\n        body: JSON.stringify(commissionData)\n    });\n}\n\n\nexport function login(loginRequest) {\n    return request({\n        url: API_BASE_URL + \"/auth/signin\",\n        method: 'POST',\n        body: /*JSON.stringify(*/loginRequest.data/*)*/\n    });\n}\n\nexport function signup(signupRequest) {\n    return request({\n        url: API_BASE_URL + \"/auth/signup\",\n        method: 'POST',\n        body: JSON.stringify(signupRequest)\n    });\n}\n\nexport function checkEmailAvailability(email) {\n    return request({\n        url: API_BASE_URL + \"/user/checkEmailAvailability?email=\" + email,\n        method: 'GET'\n    });\n}\n\n/*export function getCurrentUser() {\n    if(!localStorage.getItem(ACCESS_TOKEN)) {\n        return Promise.reject(\"No access token set.\");\n    }\n\n    return request({\n        url: API_BASE_URL + \"/user/me\",\n        method: 'GET'\n    });\n}*/\nexport function getCurrentUser() {\n    /*if(!localStorage.getItem(ACCESS_TOKEN)) {\n        return Promise.reject(\"No access token set.\");\n    }*/\n\n    return request({\n        url: API_BASE_URL + \"/user\",\n        method: 'GET'\n    });\n}\n\nexport function getUserProfile(username) {\n    return request({\n        url: API_BASE_URL + \"/users/\" + username,\n        method: 'GET'\n    });\n}\n\nexport function updateUserProfile(username, userRequest) {\n    return request({\n        url: API_BASE_URL + \"/users/\" + username,\n        method: 'PUT',\n        body: JSON.stringify(userRequest)\n    });\n}\n\nexport function getStatistics() {\n\n    return request({\n        url: API_BASE_URL + \"/dashboard\",\n        method: 'GET'\n    });\n}\n"]},"metadata":{},"sourceType":"module"}