{"ast":null,"code":"import _classCallCheck from \"/Users/geekh04/workspace/BCP/transactionMDP-client-side/node_modules/@babel/runtime/helpers/esm/classCallCheck\";\nimport _createClass from \"/Users/geekh04/workspace/BCP/transactionMDP-client-side/node_modules/@babel/runtime/helpers/esm/createClass\";\nimport _possibleConstructorReturn from \"/Users/geekh04/workspace/BCP/transactionMDP-client-side/node_modules/@babel/runtime/helpers/esm/possibleConstructorReturn\";\nimport _getPrototypeOf from \"/Users/geekh04/workspace/BCP/transactionMDP-client-side/node_modules/@babel/runtime/helpers/esm/getPrototypeOf\";\nimport _inherits from \"/Users/geekh04/workspace/BCP/transactionMDP-client-side/node_modules/@babel/runtime/helpers/esm/inherits\";\nimport _assertThisInitialized from \"/Users/geekh04/workspace/BCP/transactionMDP-client-side/node_modules/@babel/runtime/helpers/esm/assertThisInitialized\";\nvar _jsxFileName = \"/Users/geekh04/workspace/BCP/transactionMDP-client-side/src/views/User/Transfer/TransfersTable.jsx\";\nimport React from \"react\";\nimport { Link } from \"react-router-dom\";\nimport _ from \"lodash\"; // Import React Table\n\nimport ReactTable from \"react-table\"; // reactstrap components\n\nimport { Card, CardHeader, CardBody, CardTitle, Row, Col, Button } from \"reactstrap\"; // Redux components\n\nimport { connect } from \"react-redux\";\nimport { getCurrentUser } from \"../../../redux/actions\"; //import {TRANSFER_LIST_SIZE} from \"../../../variables/constants\";\n\nimport { getAllTransfers, cancelTransfer, acceptTransfer, sendTransfer } from \"../../../util/APIUtils\";\nimport NotFound from \"../../NotFound\";\nimport { formatDateTime } from \"../../../util/Helpers\";\nimport LoadingIndicator from \"../../../components/LoadingIndicator/LoadingIndicator\"; // Sweet alert\n\nimport Swal from \"sweetalert2\";\nimport withReactContent from \"sweetalert2-react-content\";\nvar MySwal = withReactContent(Swal);\n/** La page de liste des virements\n * Cette page présente une liste des virements effectués selon le role de l'utilisateur\n * */\n\nvar TransfersTable =\n/*#__PURE__*/\nfunction (_React$Component) {\n  _inherits(TransfersTable, _React$Component);\n\n  function TransfersTable(props) {\n    var _this;\n\n    _classCallCheck(this, TransfersTable);\n\n    _this = _possibleConstructorReturn(this, _getPrototypeOf(TransfersTable).call(this, props));\n\n    _this.requestData = function (pageSize, page, sorted, filtered) {\n      return new Promise(function (resolve, reject) {\n        // You can retrieve your data however you want, in this case, we will just use some local data.\n        var filteredData = _this.makeData(_this.state.allTransfers);\n\n        console.log(filteredData); // You can use the filters in your request, but you are responsible for applying them.\n\n        if (filtered.length) {\n          filteredData = filtered.reduce(function (filteredSoFar, nextFilter) {\n            return filteredSoFar.filter(function (row) {\n              return (row[nextFilter.id] + \"\").includes(nextFilter.value);\n            });\n          }, filteredData);\n        } // You can also use the sorting in your request, but again, you are responsible for applying it.\n\n\n        var sortedData = _.orderBy(filteredData, sorted.map(function (sort) {\n          return function (row) {\n            if (row[sort.id] === null || row[sort.id] === undefined) {\n              return -Infinity;\n            }\n\n            return typeof row[sort.id] === \"string\" ? row[sort.id].toLowerCase() : row[sort.id];\n          };\n        }), sorted.map(function (d) {\n          return d.desc ? \"desc\" : \"asc\";\n        })); // You must return an object containing the rows of the current page, and optionally the total pages number.\n\n\n        var res = {\n          rows: sortedData.slice(pageSize * page, pageSize * page + pageSize),\n          pages: Math.ceil(filteredData.length / pageSize)\n        }; // Here we'll simulate a server response with 500ms of delay.\n\n        setTimeout(function () {\n          return resolve(res);\n        }, 500);\n      });\n    };\n\n    _this.state = {\n      allTransfers: [],\n      // La liste des virements\n      page: 0,\n      // La page actuelle: initialisée par 0 (la 1ère page)\n      size: 10,\n      // La taille de la page: initialisée par 10 (10 virements/page)\n      totalElements: 0,\n      //\n      totalPages: 0,\n      // Le nombre total des pages\n      last: true,\n      //\n      isLoadingTransfers: true,\n      //\n      pageTransfers: [],\n      pages: null,\n      loading: true\n    };\n    _this.loadTransfersList = _this.loadTransfersList.bind(_assertThisInitialized(_assertThisInitialized(_this))); //this.handleLoadMore = this.handleLoadMore.bind(this);\n\n    _this.handleCancelTransfer = _this.handleCancelTransfer.bind(_assertThisInitialized(_assertThisInitialized(_this)));\n    _this.handleAcceptTransfer = _this.handleAcceptTransfer.bind(_assertThisInitialized(_assertThisInitialized(_this)));\n    _this.handleSendTransfer = _this.handleSendTransfer.bind(_assertThisInitialized(_assertThisInitialized(_this)));\n    _this.fetchData = _this.fetchData.bind(_assertThisInitialized(_assertThisInitialized(_this)));\n    return _this;\n  }\n\n  _createClass(TransfersTable, [{\n    key: \"componentDidMount\",\n    value: function componentDidMount() {\n      this.props.getCurrentUser();\n      /*************************************************/\n      //const username = this.props.match.params.username;\n\n      this.loadTransfersList();\n    }\n  }, {\n    key: \"componentDidUpdate\",\n    value: function componentDidUpdate(nextProps) {}\n    /*if(this.props.isAuthenticated !== nextProps.isAuthenticated) {\n      // Reset State\n      this.setState({\n        transfers: [],\n        page: 0,\n        size: 10,\n        totalElements: 0,\n        totalPages: 0,\n        last: true,\n        isLoadingTransfers: false\n      });\n      this.loadTransfersList();\n    }*/\n\n    /*handleLoadMore() {\n      this.loadTransfersList(this.state.page + 1);\n    }*/\n\n  }, {\n    key: \"loadTransfersList\",\n    value: function loadTransfersList()\n    /*page = 0, size = TRANSFER_LIST_SIZE*/\n    {\n      var _this2 = this;\n\n      var promise;\n      promise = getAllTransfers(); //getUserCreatedTransfers(this.props.currentUser.username, page, size);\n\n      if (!promise) {\n        return;\n      }\n\n      this.setState({\n        isLoadingTransfers: true\n      });\n      promise.then(function (response) {\n        _this2.setState({\n          allTransfers: response,\n\n          /*response.content\n          page: response.page,\n          size: response.size,\n          totalElements: response.totalElements,\n          totalPages: response.totalPages,\n          last: response.last,*/\n          isLoadingTransfers: false\n        });\n      }).catch(function (error) {\n        _this2.setState({\n          isLoadingTransfers: false\n        });\n      });\n    }\n  }, {\n    key: \"handleCancelTransfer\",\n    value: function handleCancelTransfer(id) {\n      var _this3 = this;\n\n      MySwal.fire({\n        buttonsStyling: false,\n        customClass: {\n          confirmButton: 'btn btn-success',\n          cancelButton: 'btn btn-danger'\n        },\n        title: 'Entrer votre motif',\n        input: 'textarea',\n        inputPlaceholder: 'Votre motif ...',\n        showCancelButton: true,\n        confirmButtonText: 'Confirmer',\n        cancelButtonText: 'Annuler'\n      }).then(function (result) {\n        if (result.value) {\n          var reason = result.value;\n          cancelTransfer(id, reason).then(function (response) {\n            // affichee un message de succès\n\n            /*return */\n            MySwal.fire({\n              type: 'success',\n              title: 'Votre operation a été enregistrée',\n              showConfirmButton: false,\n              timer: 1500\n            });\n\n            _this3.loadTransfersList();\n          }).catch(function (error) {\n            if (error.status === 401) {\n              MySwal.fire({\n                type: 'error',\n                title: 'Vous avez été déconnecté. Veuillez vous connecter pour effectuer cette opération.',\n                showConfirmButton: false,\n                timer: 1500\n              });\n\n              _this3.props.history.push('/login');\n            } else {\n              MySwal.fire({\n                type: 'warning',\n                title: error.message || 'Pardon! Quelque chose s\\'est mal passé. Veuillez réessayer!',\n                showConfirmButton: false,\n                timer: 1500\n              });\n            }\n          });\n        }\n      });\n    }\n  }, {\n    key: \"handleRefuseTransfer\",\n    value: function handleRefuseTransfer(id) {\n      var _this4 = this;\n\n      MySwal.fire({\n        buttonsStyling: false,\n        customClass: {\n          confirmButton: 'btn btn-success',\n          cancelButton: 'btn btn-danger'\n        },\n        title: 'Entrer votre motif',\n        input: 'textarea',\n        inputPlaceholder: 'Votre motif ...',\n        showCancelButton: true,\n        confirmButtonText: 'Confirmer',\n        cancelButtonText: 'Annuler'\n      }).then(function (result) {\n        if (result.value) {\n          var reason = result.value;\n          cancelTransfer(id, reason).then(function (response) {\n            // affichee un message de succès\n\n            /*return */\n            MySwal.fire({\n              type: 'success',\n              title: 'Votre operation a été enregistrée',\n              showConfirmButton: false,\n              timer: 1500\n            });\n\n            _this4.loadTransfersList();\n          }).catch(function (error) {\n            if (error.status === 401) {\n              MySwal.fire({\n                type: 'error',\n                title: 'Vous avez été déconnecté. Veuillez vous connecter pour effectuer cette opération.',\n                showConfirmButton: false,\n                timer: 1500\n              });\n\n              _this4.props.history.push('/login');\n            } else {\n              MySwal.fire({\n                type: 'warning',\n                title: error.message || 'Pardon! Quelque chose s\\'est mal passé. Veuillez réessayer!',\n                showConfirmButton: false,\n                timer: 1500\n              });\n            }\n          });\n        }\n      });\n    }\n  }, {\n    key: \"handleAcceptTransfer\",\n    value: function handleAcceptTransfer(id) {\n      var _this5 = this;\n\n      acceptTransfer(id).then(function (response) {\n        /*return */\n        MySwal.fire({\n          type: 'success',\n          title: 'Votre operation a été enregistrée',\n          showConfirmButton: false,\n          timer: 1500\n        });\n\n        _this5.loadTransfersList();\n      }).catch(function (error) {\n        if (error.status === 401) {\n          MySwal.fire({\n            type: 'error',\n            title: 'Vous avez été déconnecté. Veuillez vous connecter pour effectuer cette opération.',\n            showConfirmButton: false,\n            timer: 1500\n          });\n\n          _this5.props.history.push('/login');\n        } else {\n          MySwal.fire({\n            type: 'warning',\n            title: error.message || 'Pardon! Quelque chose s\\'est mal passé. Veuillez réessayer!',\n            showConfirmButton: false,\n            timer: 1500\n          });\n        }\n      });\n    }\n  }, {\n    key: \"handleSendTransfer\",\n    value: function handleSendTransfer(id) {\n      var _this6 = this;\n\n      sendTransfer(id).then(function (response) {\n        /*return */\n        MySwal.fire({\n          type: 'success',\n          title: 'Votre operation a été enregistrée',\n          showConfirmButton: false,\n          timer: 1500\n        });\n\n        _this6.loadTransfersList();\n      }).catch(function (error) {\n        if (error.status === 401) {\n          MySwal.fire({\n            type: 'error',\n            title: 'Vous avez été déconnecté. Veuillez vous connecter pour effectuer cette opération.',\n            showConfirmButton: false,\n            timer: 1500\n          });\n\n          _this6.props.history.push('/login');\n        } else {\n          MySwal.fire({\n            type: 'warning',\n            title: error.message || 'Pardon! Quelque chose s\\'est mal passé. Veuillez réessayer!',\n            showConfirmButton: false,\n            timer: 1500\n          });\n        }\n      });\n    }\n  }, {\n    key: \"renderSwitch\",\n    value: function renderSwitch(state, link) {\n      switch (state.code) {\n        case \"3000\":\n          return React.createElement(React.Fragment, null, React.createElement(Link, {\n            to: link,\n            __source: {\n              fileName: _jsxFileName,\n              lineNumber: 285\n            },\n            __self: this\n          }, React.createElement(Button, {\n            className: \"btn-link\",\n            color: \"success\",\n            __source: {\n              fileName: _jsxFileName,\n              lineNumber: 285\n            },\n            __self: this\n          }, \"Valid\\xE9e\")), \" \", React.createElement(Button, {\n            className: \"btn-icon btn-simple\",\n            onClick: this.handleCancelTransfer,\n            style: {\n              border: 0\n            },\n            color: \"primary\",\n            size: \"sm\",\n            __source: {\n              fileName: _jsxFileName,\n              lineNumber: 286\n            },\n            __self: this\n          }, React.createElement(\"i\", {\n            className: \"fa fa-times\",\n            __source: {\n              fileName: _jsxFileName,\n              lineNumber: 287\n            },\n            __self: this\n          })));\n\n        case \"1000\":\n          return React.createElement(React.Fragment, null, React.createElement(Link, {\n            to: link,\n            __source: {\n              fileName: _jsxFileName,\n              lineNumber: 291\n            },\n            __self: this\n          }, React.createElement(Button, {\n            className: \"btn-link\",\n            color: \"warning\",\n            __source: {\n              fileName: _jsxFileName,\n              lineNumber: 291\n            },\n            __self: this\n          }, \"Encours\")), \" \", React.createElement(Button, {\n            className: \"btn-icon btn-simple\",\n            onClick: this.handleCancelTransfer,\n            style: {\n              border: 0\n            },\n            color: \"primary\",\n            size: \"sm\",\n            __source: {\n              fileName: _jsxFileName,\n              lineNumber: 292\n            },\n            __self: this\n          }, React.createElement(\"i\", {\n            className: \"fa fa-times\",\n            __source: {\n              fileName: _jsxFileName,\n              lineNumber: 293\n            },\n            __self: this\n          })));\n\n        case \"4000\":\n          return React.createElement(React.Fragment, null, React.createElement(Link, {\n            to: link,\n            __source: {\n              fileName: _jsxFileName,\n              lineNumber: 297\n            },\n            __self: this\n          }, React.createElement(Button, {\n            className: \"btn-link\",\n            color: \"danger\",\n            __source: {\n              fileName: _jsxFileName,\n              lineNumber: 297\n            },\n            __self: this\n          }, \"Rejet\\xE9e\")), \" \", React.createElement(Button, {\n            className: \"btn-icon btn-simple\",\n            onClick: this.handleCancelTransfer,\n            style: {\n              border: 0\n            },\n            color: \"primary\",\n            size: \"sm\",\n            __source: {\n              fileName: _jsxFileName,\n              lineNumber: 298\n            },\n            __self: this\n          }, React.createElement(\"i\", {\n            className: \"fa fa-times\",\n            __source: {\n              fileName: _jsxFileName,\n              lineNumber: 299\n            },\n            __self: this\n          })));\n\n        default:\n          return null;\n      }\n    }\n  }, {\n    key: \"renderBtnCTN\",\n    value: function renderBtnCTN(link) {\n      return React.createElement(React.Fragment, null, React.createElement(Button, {\n        className: \"btn-icon btn-simple\",\n        onClick: this.handleAcceptTransfer,\n        style: {\n          border: 0\n        },\n        color: \"primary\",\n        size: \"sm\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 310\n        },\n        __self: this\n      }, React.createElement(\"i\", {\n        className: \"fa fa-check\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 311\n        },\n        __self: this\n      })), \" \", React.createElement(Button, {\n        className: \"btn-icon btn-simple\",\n        onClick: this.handleCancelTransfer,\n        style: {\n          border: 0\n        },\n        color: \"primary\",\n        size: \"sm\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 313\n        },\n        __self: this\n      }, React.createElement(\"i\", {\n        className: \"fa fa-times\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 314\n        },\n        __self: this\n      })), \" \", React.createElement(Link, {\n        to: link,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 316\n        },\n        __self: this\n      }, React.createElement(Button, {\n        className: \"btn-icon btn-simple\",\n        style: {\n          border: 0\n        },\n        color: \"primary\",\n        size: \"sm\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 316\n        },\n        __self: this\n      }, React.createElement(\"i\", {\n        className: \"fa fa-eye\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 317\n        },\n        __self: this\n      }))));\n    }\n  }, {\n    key: \"renderBtnCTRL\",\n    value: function renderBtnCTRL(link) {\n      return React.createElement(React.Fragment, null, this.renderBtnCTN(link), \" \", React.createElement(Button, {\n        className: \"btn-icon btn-simple\",\n        onClick: this.handleSendTransfer,\n        style: {\n          border: 0\n        },\n        color: \"primary\",\n        size: \"sm\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 328\n        },\n        __self: this\n      }, React.createElement(\"i\", {\n        className: \"fa fa-paper-plane\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 329\n        },\n        __self: this\n      })));\n    }\n  }, {\n    key: \"makeData\",\n    value: function makeData(transfers) {\n      var _this7 = this;\n\n      return transfers.map(function (transfer, key) {\n        return {\n          reference: transfer.reference,\n          operationDate: formatDateTime(transfer.operationDate),\n          principalAccount: transfer.creditAccount.accountNumber,\n          beneficiaryAccount: transfer.debitAccount.accountNumber,\n          transactionAmount: transfer.amount,\n          stateAction: _this7.props.currentUser.role === \"ROLE_AGENT\" ? _this7.renderSwitch(transfer.state, \"/user/transfers/\" + transfer.reference) : _this7.props.currentUser.role === \"ROLE_CTN\" ? _this7.renderBtnCTN(\"/user/transfers/\" + transfer.reference) : _this7.props.currentUser.role === \"ROLE_CTRL\" ? _this7.renderBtnCTRL(\"/user/transfers/\" + transfer.reference) : null\n        };\n      });\n    }\n  }, {\n    key: \"fetchData\",\n    value: function fetchData(state, instance) {\n      var _this8 = this;\n\n      // Whenever the table model changes, or the user sorts or changes pages, this method gets called and passed the current table model.\n      // You can set the `loading` prop of the table to true to use the built-in one or show you're own loading bar if you want.\n      //this.setState({ loading: true });\n      // Request the data however you want.  Here, we'll use our mocked service we created earlier\n      this.requestData(state.pageSize, state.page, state.sorted, state.filtered).then(function (res) {\n        // Now just get the rows of data to your React Table (and update anything else like total pages or loading)\n        _this8.setState({\n          pageTransfers: res.rows,\n          pages: res.pages,\n          loading: false\n        });\n      });\n    }\n  }, {\n    key: \"render\",\n    value: function render() {\n      var _this$state = this.state,\n          isLoadingTransfers = _this$state.isLoadingTransfers,\n          pageTransfers = _this$state.pageTransfers,\n          pages = _this$state.pages,\n          loading = _this$state.loading;\n\n      if (isLoadingTransfers) {\n        return React.createElement(LoadingIndicator, {\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 417\n          },\n          __self: this\n        });\n      }\n      /*if(this.state.notFound || !this.props.currentUser) {\n        return <NotFound />;\n      }*/\n\n      /*if(this.state.serverError) {\n        return <ServerError />;\n      }*/\n\n\n      return React.createElement(React.Fragment, null, React.createElement(\"div\", {\n        className: \"content\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 429\n        },\n        __self: this\n      }, React.createElement(Row, {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 430\n        },\n        __self: this\n      }, React.createElement(Col, {\n        md: \"12\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 431\n        },\n        __self: this\n      }, React.createElement(Card, {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 432\n        },\n        __self: this\n      }, React.createElement(CardHeader, {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 433\n        },\n        __self: this\n      }, React.createElement(CardTitle, {\n        tag: \"h4\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 434\n        },\n        __self: this\n      }, \"Mes virements\")), React.createElement(CardBody, {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 436\n        },\n        __self: this\n      }, React.createElement(\"div\", {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 437\n        },\n        __self: this\n      }, React.createElement(ReactTable, {\n        columns: [{\n          Header: \"Référence\",\n          id: \"reference\",\n          accessor: function accessor(d) {\n            return d.reference;\n          }\n        }, {\n          Header: \"Date d'opération\",\n          accessor: \"operationDate\"\n        }, {\n          Header: \"Donneur d’ordre\",\n          accessor: \"principalAccount\"\n        }, {\n          Header: \"Bénéficiaire\",\n          accessor: \"beneficiaryAccount\"\n        }, {\n          Header: \"Montant\",\n          accessor: \"transactionAmount\"\n        }, {\n          Header: \"Etat/Action\",\n          accessor: \"stateAction\",\n          filterable: false,\n          className: \"actions-right\"\n        }],\n        manual: true // Forces table not to paginate or sort automatically, so we can handle it server-side\n        ,\n        data: pageTransfers,\n        pages: pages // Display the total number of pages\n        ,\n        loading: loading // Display the loading overlay when we need it\n        ,\n        onFetchData: this.fetchData // Request new data when things change\n        ,\n        filterable: true,\n        sortable: true,\n        defaultPageSize: 10,\n        className: \"-striped -highlight\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 438\n        },\n        __self: this\n      }))))))));\n    }\n  }]);\n\n  return TransfersTable;\n}(React.Component);\n\nvar mapStateToProps = function mapStateToProps(state) {\n  return {\n    currentUser: state.currentUser\n  };\n};\n\nexport default connect(mapStateToProps, {\n  getCurrentUser: getCurrentUser\n})(TransfersTable);","map":{"version":3,"sources":["/Users/geekh04/workspace/BCP/transactionMDP-client-side/src/views/User/Transfer/TransfersTable.jsx"],"names":["React","Link","_","ReactTable","Card","CardHeader","CardBody","CardTitle","Row","Col","Button","connect","getCurrentUser","getAllTransfers","cancelTransfer","acceptTransfer","sendTransfer","NotFound","formatDateTime","LoadingIndicator","Swal","withReactContent","MySwal","TransfersTable","props","requestData","pageSize","page","sorted","filtered","Promise","resolve","reject","filteredData","makeData","state","allTransfers","console","log","length","reduce","filteredSoFar","nextFilter","filter","row","id","includes","value","sortedData","orderBy","map","sort","undefined","Infinity","toLowerCase","d","desc","res","rows","slice","pages","Math","ceil","setTimeout","size","totalElements","totalPages","last","isLoadingTransfers","pageTransfers","loading","loadTransfersList","bind","handleCancelTransfer","handleAcceptTransfer","handleSendTransfer","fetchData","nextProps","promise","setState","then","response","catch","error","fire","buttonsStyling","customClass","confirmButton","cancelButton","title","input","inputPlaceholder","showCancelButton","confirmButtonText","cancelButtonText","result","reason","type","showConfirmButton","timer","status","history","push","message","link","code","border","renderBtnCTN","transfers","transfer","key","reference","operationDate","principalAccount","creditAccount","accountNumber","beneficiaryAccount","debitAccount","transactionAmount","amount","stateAction","currentUser","role","renderSwitch","renderBtnCTRL","instance","Header","accessor","filterable","className","Component","mapStateToProps"],"mappings":"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","sourcesContent":["import React from \"react\";\nimport { Link } from \"react-router-dom\";\n\nimport _ from \"lodash\";\n\n// Import React Table\nimport ReactTable from \"react-table\";\n\n// reactstrap components\nimport {\n  Card,\n  CardHeader,\n  CardBody,\n  CardTitle,\n  Row,\n  Col,\n  Button\n} from \"reactstrap\";\n\n// Redux components\nimport { connect } from \"react-redux\";\nimport { getCurrentUser } from \"../../../redux/actions\";\n\n//import {TRANSFER_LIST_SIZE} from \"../../../variables/constants\";\nimport { getAllTransfers, cancelTransfer, acceptTransfer, sendTransfer} from \"../../../util/APIUtils\";\nimport NotFound from \"../../NotFound\";\nimport {formatDateTime} from \"../../../util/Helpers\";\nimport LoadingIndicator from \"../../../components/LoadingIndicator/LoadingIndicator\";\n\n// Sweet alert\nimport Swal from \"sweetalert2\";\nimport withReactContent from \"sweetalert2-react-content\";\nconst MySwal = withReactContent(Swal);\n\n\n/** La page de liste des virements\n * Cette page présente une liste des virements effectués selon le role de l'utilisateur\n * */\nclass TransfersTable extends React.Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      allTransfers: [],                 // La liste des virements\n      page: 0,                       // La page actuelle: initialisée par 0 (la 1ère page)\n      size: 10,                      // La taille de la page: initialisée par 10 (10 virements/page)\n      totalElements: 0,              //\n      totalPages: 0,                 // Le nombre total des pages\n      last: true,                    //\n      isLoadingTransfers: true,      //\n\n\n      pageTransfers: [],\n      pages: null,\n      loading: true\n    };\n    this.loadTransfersList = this.loadTransfersList.bind(this);\n    //this.handleLoadMore = this.handleLoadMore.bind(this);\n    this.handleCancelTransfer = this.handleCancelTransfer.bind(this);\n    this.handleAcceptTransfer = this.handleAcceptTransfer.bind(this);\n    this.handleSendTransfer = this.handleSendTransfer.bind(this);\n\n    this.fetchData = this.fetchData.bind(this);\n  }\n\n  componentDidMount() {\n    this.props.getCurrentUser();\n    /*************************************************/\n    //const username = this.props.match.params.username;\n    this.loadTransfersList();\n  }\n\n  componentDidUpdate(nextProps) {\n    /*if(this.props.isAuthenticated !== nextProps.isAuthenticated) {\n      // Reset State\n      this.setState({\n        transfers: [],\n        page: 0,\n        size: 10,\n        totalElements: 0,\n        totalPages: 0,\n        last: true,\n        isLoadingTransfers: false\n      });\n      this.loadTransfersList();\n    }*/\n  }\n\n  /*handleLoadMore() {\n    this.loadTransfersList(this.state.page + 1);\n  }*/\n\n  loadTransfersList(/*page = 0, size = TRANSFER_LIST_SIZE*/) {\n    let promise;\n\n    promise = getAllTransfers();//getUserCreatedTransfers(this.props.currentUser.username, page, size);\n\n    if(!promise) {\n      return;\n    }\n\n    this.setState({\n      isLoadingTransfers: true\n    });\n\n    promise\n        .then(response => {\n          this.setState({\n            allTransfers: response,/*response.content\n            page: response.page,\n            size: response.size,\n            totalElements: response.totalElements,\n            totalPages: response.totalPages,\n            last: response.last,*/\n            isLoadingTransfers: false\n          })\n        }).catch(error => {\n      this.setState({\n        isLoadingTransfers: false\n      })\n    });\n\n  }\n\n  handleCancelTransfer(id) {\n    MySwal.fire({\n      buttonsStyling:false,\n      customClass: {\n        confirmButton: 'btn btn-success',\n        cancelButton: 'btn btn-danger',\n      },\n      title: 'Entrer votre motif',\n      input: 'textarea',\n      inputPlaceholder: 'Votre motif ...',\n      showCancelButton: true,\n      confirmButtonText: 'Confirmer',\n      cancelButtonText: 'Annuler'\n    }).then((result) => {\n      if (result.value) {\n        let reason = result.value;\n        cancelTransfer(id, reason)\n            .then(response => {\n              // affichee un message de succès\n              /*return */MySwal.fire({\n                type: 'success',\n                title: 'Votre operation a été enregistrée',\n                showConfirmButton: false,\n                timer: 1500\n              });\n              this.loadTransfersList();\n            }).catch(error => {\n          if(error.status === 401) {\n            MySwal.fire({\n              type: 'error',\n              title: 'Vous avez été déconnecté. Veuillez vous connecter pour effectuer cette opération.',\n              showConfirmButton: false,\n              timer: 1500\n            });\n            this.props.history.push('/login');\n          } else {\n            MySwal.fire({\n              type: 'warning',\n              title: error.message || 'Pardon! Quelque chose s\\'est mal passé. Veuillez réessayer!',\n              showConfirmButton: false,\n              timer: 1500\n            })\n          }\n        });\n      }\n    })\n  }\n\n  handleRefuseTransfer(id) {\n    MySwal.fire({\n      buttonsStyling:false,\n      customClass: {\n        confirmButton: 'btn btn-success',\n        cancelButton: 'btn btn-danger',\n      },\n      title: 'Entrer votre motif',\n      input: 'textarea',\n      inputPlaceholder: 'Votre motif ...',\n      showCancelButton: true,\n      confirmButtonText: 'Confirmer',\n      cancelButtonText: 'Annuler'\n    }).then((result) => {\n      if (result.value) {\n        let reason = result.value;\n        cancelTransfer(id, reason)\n            .then(response => {\n              // affichee un message de succès\n              /*return */MySwal.fire({\n                type: 'success',\n                title: 'Votre operation a été enregistrée',\n                showConfirmButton: false,\n                timer: 1500\n              });\n              this.loadTransfersList();\n            }).catch(error => {\n          if(error.status === 401) {\n            MySwal.fire({\n              type: 'error',\n              title: 'Vous avez été déconnecté. Veuillez vous connecter pour effectuer cette opération.',\n              showConfirmButton: false,\n              timer: 1500\n            });\n            this.props.history.push('/login');\n          } else {\n            MySwal.fire({\n              type: 'warning',\n              title: error.message || 'Pardon! Quelque chose s\\'est mal passé. Veuillez réessayer!',\n              showConfirmButton: false,\n              timer: 1500\n            })\n          }\n        });\n      }\n    })\n  }\n\n  handleAcceptTransfer(id) {\n    acceptTransfer(id)\n        .then(response => {\n\n          /*return */MySwal.fire({\n            type: 'success',\n            title: 'Votre operation a été enregistrée',\n            showConfirmButton: false,\n            timer: 1500\n          });\n          this.loadTransfersList();\n        }).catch(error => {\n      if(error.status === 401) {\n        MySwal.fire({\n          type: 'error',\n          title: 'Vous avez été déconnecté. Veuillez vous connecter pour effectuer cette opération.',\n          showConfirmButton: false,\n          timer: 1500\n        });\n        this.props.history.push('/login');\n      } else {\n        MySwal.fire({\n          type: 'warning',\n          title: error.message || 'Pardon! Quelque chose s\\'est mal passé. Veuillez réessayer!',\n          showConfirmButton: false,\n          timer: 1500\n        });\n      }\n    });\n  }\n\n  handleSendTransfer(id) {\n    sendTransfer(id)\n        .then(response => {\n\n          /*return */MySwal.fire({\n            type: 'success',\n            title: 'Votre operation a été enregistrée',\n            showConfirmButton: false,\n            timer: 1500\n          });\n          this.loadTransfersList();\n        }).catch(error => {\n      if(error.status === 401) {\n        MySwal.fire({\n          type: 'error',\n          title: 'Vous avez été déconnecté. Veuillez vous connecter pour effectuer cette opération.',\n          showConfirmButton: false,\n          timer: 1500\n        });\n        this.props.history.push('/login');\n      } else {\n        MySwal.fire({\n          type: 'warning',\n          title: error.message || 'Pardon! Quelque chose s\\'est mal passé. Veuillez réessayer!',\n          showConfirmButton: false,\n          timer: 1500\n        });\n      }\n    });\n  }\n\n  renderSwitch(state, link) {\n    switch(state.code) {\n      case \"3000\":\n        return <><Link to={link}><Button className=\"btn-link\" color=\"success\">Validée</Button></Link>\n          {` `}<Button className=\"btn-icon btn-simple\" onClick={this.handleCancelTransfer} style={{border:0}} color=\"primary\" size=\"sm\">\n            <i className=\"fa fa-times\" />\n          </Button>\n        </>;\n      case \"1000\":\n        return <><Link to={link}><Button className=\"btn-link\" color=\"warning\">Encours</Button></Link>\n              {` `}<Button className=\"btn-icon btn-simple\" onClick={this.handleCancelTransfer} style={{border:0}} color=\"primary\" size=\"sm\">\n                <i className=\"fa fa-times\" />\n              </Button>\n            </>;\n      case \"4000\":\n        return <><Link to={link}><Button className=\"btn-link\" color=\"danger\">Rejetée</Button></Link>\n          {` `}<Button className=\"btn-icon btn-simple\" onClick={this.handleCancelTransfer} style={{border:0}} color=\"primary\" size=\"sm\">\n          <i className=\"fa fa-times\" />\n        </Button>\n        </>;\n      default:\n        return null;\n    }\n  }\n\n  renderBtnCTN(link) {\n    return(\n        <>\n          <Button className=\"btn-icon btn-simple\" onClick={this.handleAcceptTransfer} style={{border:0}} color=\"primary\" size=\"sm\">\n            <i className=\"fa fa-check\"></i>\n          </Button>{` `}\n          <Button className=\"btn-icon btn-simple\" onClick={this.handleCancelTransfer} style={{border:0}} color=\"primary\" size=\"sm\">\n            <i className=\"fa fa-times\" />\n          </Button>{` `}\n          <Link to={link}><Button className=\"btn-icon btn-simple\" style={{border:0}} color=\"primary\" size=\"sm\">\n            <i className=\"fa fa-eye\"></i>\n          </Button></Link>\n        </>\n    );\n  }\n\n  renderBtnCTRL(link) {\n    return(\n        <>\n          {this.renderBtnCTN(link)}\n          {` `}\n          <Button className=\"btn-icon btn-simple\" onClick={this.handleSendTransfer} style={{border:0}} color=\"primary\" size=\"sm\">\n            <i className=\"fa fa-paper-plane\"></i>\n          </Button>\n        </>\n    );\n  }\n\n  makeData(transfers) {\n    return transfers.map((transfer, key) => {\n      return {\n        reference: transfer.reference,\n        operationDate: formatDateTime(transfer.operationDate),\n        principalAccount: transfer.creditAccount.accountNumber,\n        beneficiaryAccount: transfer.debitAccount.accountNumber,\n        transactionAmount: transfer.amount,\n        stateAction:\n            this.props.currentUser.role===\"ROLE_AGENT\"\n                ? this.renderSwitch(transfer.state,\"/user/transfers/\"+transfer.reference)\n                : this.props.currentUser.role===\"ROLE_CTN\"? this.renderBtnCTN(\"/user/transfers/\"+transfer.reference)\n                : this.props.currentUser.role===\"ROLE_CTRL\"?this.renderBtnCTRL(\"/user/transfers/\"+transfer.reference):null\n      };\n    });\n  }\n\n  requestData = (pageSize, page, sorted, filtered) => {\n    return new Promise((resolve, reject) => {\n      // You can retrieve your data however you want, in this case, we will just use some local data.\n\n      let filteredData = this.makeData(this.state.allTransfers);\n      console.log(filteredData);\n      // You can use the filters in your request, but you are responsible for applying them.\n      if (filtered.length) {\n        filteredData = filtered.reduce((filteredSoFar, nextFilter) => {\n          return filteredSoFar.filter(row => {\n            return (row[nextFilter.id] + \"\").includes(nextFilter.value);\n          });\n        }, filteredData);\n      }\n      // You can also use the sorting in your request, but again, you are responsible for applying it.\n      const sortedData = _.orderBy(\n          filteredData,\n          sorted.map(sort => {\n            return row => {\n              if (row[sort.id] === null || row[sort.id] === undefined) {\n                return -Infinity;\n              }\n              return typeof row[sort.id] === \"string\"\n                  ? row[sort.id].toLowerCase()\n                  : row[sort.id];\n            };\n          }),\n          sorted.map(d => (d.desc ? \"desc\" : \"asc\"))\n      );\n\n      // You must return an object containing the rows of the current page, and optionally the total pages number.\n      const res = {\n        rows: sortedData.slice(pageSize * page, pageSize * page + pageSize),\n        pages: Math.ceil(filteredData.length / pageSize)\n      };\n\n      // Here we'll simulate a server response with 500ms of delay.\n      setTimeout(() => resolve(res), 500);\n    });\n  };\n\n  fetchData(state, instance) {\n    // Whenever the table model changes, or the user sorts or changes pages, this method gets called and passed the current table model.\n    // You can set the `loading` prop of the table to true to use the built-in one or show you're own loading bar if you want.\n    //this.setState({ loading: true });\n    // Request the data however you want.  Here, we'll use our mocked service we created earlier\n    this.requestData(\n        state.pageSize,\n        state.page,\n        state.sorted,\n        state.filtered\n    ).then(res => {\n      // Now just get the rows of data to your React Table (and update anything else like total pages or loading)\n      this.setState({\n        pageTransfers: res.rows,\n        pages: res.pages,\n        loading: false\n      });\n    });\n  }\n\n  render() {\n    const { isLoadingTransfers, pageTransfers, pages, loading } = this.state;\n\n    if(isLoadingTransfers) {\n      return <LoadingIndicator />;\n    }\n\n    /*if(this.state.notFound || !this.props.currentUser) {\n      return <NotFound />;\n    }*/\n\n    /*if(this.state.serverError) {\n      return <ServerError />;\n    }*/\n    return (\n        <>\n          <div className=\"content\">\n            <Row>\n              <Col md=\"12\">\n                <Card>\n                  <CardHeader>\n                    <CardTitle tag=\"h4\">Mes virements</CardTitle>\n                  </CardHeader>\n                  <CardBody>\n                    <div>\n                      <ReactTable\n                          columns={[\n                            {\n                              Header: \"Référence\",\n                              id: \"reference\",\n                              accessor: d => d.reference\n                            },\n                            {\n                              Header: \"Date d'opération\",\n                              accessor: \"operationDate\"\n                            },\n                            {\n                              Header: \"Donneur d’ordre\",\n                              accessor: \"principalAccount\"\n                            },\n                            {\n                              Header: \"Bénéficiaire\",\n                              accessor: \"beneficiaryAccount\"\n                            },\n                            {\n                              Header: \"Montant\",\n                              accessor: \"transactionAmount\"\n                            },\n                            {\n                              Header: \"Etat/Action\",\n                              accessor: \"stateAction\",\n                              filterable: false,\n                              className: \"actions-right\"\n                            }\n                          ]}\n                          manual // Forces table not to paginate or sort automatically, so we can handle it server-side\n                          data={pageTransfers}\n                          pages={pages} // Display the total number of pages\n                          loading={loading} // Display the loading overlay when we need it\n                          onFetchData={this.fetchData} // Request new data when things change\n                          filterable\n                          sortable\n                          defaultPageSize={10}\n                          className=\"-striped -highlight\"\n                      />\n                    </div>\n                  </CardBody>\n                </Card>\n              </Col>\n            </Row>\n          </div>\n        </>\n    );\n  }\n}\n\nconst mapStateToProps = (state) =>{\n  return {\n    currentUser: state.currentUser\n  };\n};\n\nexport default connect(mapStateToProps, { getCurrentUser })(TransfersTable);\n"]},"metadata":{},"sourceType":"module"}