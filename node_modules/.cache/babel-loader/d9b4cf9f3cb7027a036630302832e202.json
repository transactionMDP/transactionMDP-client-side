{"ast":null,"code":"import _classCallCheck from \"/Users/geekh04/workspace/BCP/bcp-transactionMDP-client/node_modules/@babel/runtime/helpers/esm/classCallCheck\";\nimport _createClass from \"/Users/geekh04/workspace/BCP/bcp-transactionMDP-client/node_modules/@babel/runtime/helpers/esm/createClass\";\nimport _possibleConstructorReturn from \"/Users/geekh04/workspace/BCP/bcp-transactionMDP-client/node_modules/@babel/runtime/helpers/esm/possibleConstructorReturn\";\nimport _getPrototypeOf from \"/Users/geekh04/workspace/BCP/bcp-transactionMDP-client/node_modules/@babel/runtime/helpers/esm/getPrototypeOf\";\nimport _inherits from \"/Users/geekh04/workspace/BCP/bcp-transactionMDP-client/node_modules/@babel/runtime/helpers/esm/inherits\";\nimport _assertThisInitialized from \"/Users/geekh04/workspace/BCP/bcp-transactionMDP-client/node_modules/@babel/runtime/helpers/esm/assertThisInitialized\";\nvar _jsxFileName = \"/Users/geekh04/workspace/BCP/bcp-transactionMDP-client/src/routes/App.js\";\nimport React, { Component } from 'react';\nimport { Route, withRouter, Switch, Redirect } from 'react-router-dom';\nimport { getCurrentUser, login } from '../util/APIUtils';\nimport { ACCESS_TOKEN } from '../variables/constants';\nimport Dashboard from '../views/User/Dashboard/Dashboard.jsx';\nimport Login from '../views/Login';\nimport NotFound from '../views/NotFound';\nimport LoadingIndicator from '../components/LoadingIndicator/LoadingIndicator';\nimport PrivateRoute from './PrivateRoute'; // Sweet alert\n\nimport Swal from \"sweetalert2\";\nimport withReactContent from \"sweetalert2-react-content\";\nvar MySwal = withReactContent(Swal);\n\nvar App =\n/*#__PURE__*/\nfunction (_Component) {\n  _inherits(App, _Component);\n\n  function App(props) {\n    var _this;\n\n    _classCallCheck(this, App);\n\n    _this = _possibleConstructorReturn(this, _getPrototypeOf(App).call(this, props));\n\n    _this.handleLogin = function (loginRequest) {\n      //let loginRequest=null;\n      var Toast = MySwal.mixin({\n        toast: true,\n        position: 'top-end',\n        showConfirmButton: false,\n        timer: 2000\n      });\n      login(loginRequest).then(function (response) {\n        localStorage.setItem(ACCESS_TOKEN, response.accessToken);\n        Toast.fire({\n          type: 'success',\n          title: 'Vous êtes connecté avec succès.'\n        }); //this.loadCurrentUser();\n\n        _this.props.history.push(\"/user/addtransfer\");\n      }).catch(function (error) {\n        if (error.status === 401) {\n          Toast.fire({\n            type: 'error',\n            title: 'Votre nom d\\'utilisateur ou votre mot de passe est incorrect. Veuillez réessayer!'\n          });\n        } else {\n          _this.setState({\n            isAuthenticated: true\n          });\n\n          _this.props.history.push(\"/user/addtransfer\");\n\n          Toast.fire({\n            type: 'warning',\n            title: 'Pardon! Quelque chose s\\'est mal passé. Veuillez réessayer!'\n          });\n        }\n      });\n    };\n\n    _this.handleLogout = function () {\n      localStorage.removeItem(ACCESS_TOKEN);\n\n      _this.setState({\n        currentUser: null,\n        isAuthenticated: false\n      });\n\n      var Toast = MySwal.mixin({\n        toast: true,\n        position: 'top-end',\n        showConfirmButton: false,\n        timer: 2000\n      });\n      Toast.fire({\n        type: 'success',\n        title: 'Vous êtes déconnecté avec succès.'\n      });\n\n      _this.props.history.push('/login');\n    };\n\n    _this.state = {\n      currentUser: null,\n      isAuthenticated: true,\n      //false,\n      isLoading: true\n    };\n    _this.handleLogout = _this.handleLogout.bind(_assertThisInitialized(_assertThisInitialized(_this))); //this.loadCurrentUser = this.loadCurrentUser.bind(this);\n\n    _this.handleLogin = _this.handleLogin.bind(_assertThisInitialized(_assertThisInitialized(_this)));\n    return _this;\n  }\n  /*componentWillMount(){\n    this.loadCurrentUser();\n    alert(this.state.isAuthenticated);\n  }*/\n\n  /*loadCurrentUser() {\n    this.setState({\n      isLoading: true\n    });\n    getCurrentUser()\n    .then(response => {\n      this.setState({\n        currentUser: response,\n        isAuthenticated: true,\n        isLoading: false\n      });\n      //alert(this.state.isAuthenticated);\n    }).catch(error => {\n      this.setState({\n        isLoading: false\n      });  \n    });\n  }*/\n\n  /*componentDidMount() {\n    this.loadCurrentUser();\n  }*/\n\n\n  _createClass(App, [{\n    key: \"render\",\n    value: function render() {\n      /*if(this.state.isLoading) {\n        return <LoadingIndicator />\n      }*/\n      return React.createElement(React.Fragment, null, React.createElement(Switch, {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 133\n        },\n        __self: this\n      }, React.createElement(Route, {\n        path: \"/login\",\n        render: function render(props) {\n          return React.createElement(Login\n          /*handleLogin={this.handleLogin}*/\n          , Object.assign({}, props, {\n            __source: {\n              fileName: _jsxFileName,\n              lineNumber: 135\n            },\n            __self: this\n          }));\n        },\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 134\n        },\n        __self: this\n      }), React.createElement(PrivateRoute, {\n        path: \"/user\",\n        component: Dashboard,\n        handleLogout: this.handleLogout,\n        history: this.props.history,\n        currentUser: this.state.currentUser,\n        isAuthenticated: this.state.isAuthenticated,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 136\n        },\n        __self: this\n      }), React.createElement(Redirect, {\n        exact: true,\n        from: \"/\",\n        to: \"/login\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 137\n        },\n        __self: this\n      }), React.createElement(Route, {\n        component: NotFound,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 138\n        },\n        __self: this\n      })));\n    }\n  }]);\n\n  return App;\n}(Component);\n\nexport default withRouter(App);","map":{"version":3,"sources":["/Users/geekh04/workspace/BCP/bcp-transactionMDP-client/src/routes/App.js"],"names":["React","Component","Route","withRouter","Switch","Redirect","getCurrentUser","login","ACCESS_TOKEN","Dashboard","Login","NotFound","LoadingIndicator","PrivateRoute","Swal","withReactContent","MySwal","App","props","handleLogin","loginRequest","Toast","mixin","toast","position","showConfirmButton","timer","then","response","localStorage","setItem","accessToken","fire","type","title","history","push","catch","error","status","setState","isAuthenticated","handleLogout","removeItem","currentUser","state","isLoading","bind"],"mappings":";;;;;;;AAAA,OAAOA,KAAP,IAAgBC,SAAhB,QAAiC,OAAjC;AAEA,SACEC,KADF,EAEEC,UAFF,EAGEC,MAHF,EAIEC,QAJF,QAKO,kBALP;AAOA,SAASC,cAAT,EAAwBC,KAAxB,QAAqC,kBAArC;AACA,SAASC,YAAT,QAA6B,wBAA7B;AAEA,OAAOC,SAAP,MAAsB,uCAAtB;AACA,OAAOC,KAAP,MAAkB,gBAAlB;AACA,OAAOC,QAAP,MAAqB,mBAArB;AACA,OAAOC,gBAAP,MAA6B,iDAA7B;AACA,OAAOC,YAAP,MAAyB,gBAAzB,C,CAEA;;AACA,OAAOC,IAAP,MAAiB,aAAjB;AACA,OAAOC,gBAAP,MAA6B,2BAA7B;AACA,IAAMC,MAAM,GAAGD,gBAAgB,CAACD,IAAD,CAA/B;;IAEMG,G;;;;;AACJ,eAAYC,KAAZ,EAAmB;AAAA;;AAAA;;AACjB,6EAAMA,KAAN;;AADiB,UA0CnBC,WA1CmB,GA0CL,UAACC,YAAD,EAAkB;AAE9B;AAEA,UAAMC,KAAK,GAAGL,MAAM,CAACM,KAAP,CAAa;AACzBC,QAAAA,KAAK,EAAE,IADkB;AAEzBC,QAAAA,QAAQ,EAAE,SAFe;AAGzBC,QAAAA,iBAAiB,EAAE,KAHM;AAIzBC,QAAAA,KAAK,EAAE;AAJkB,OAAb,CAAd;AAMAnB,MAAAA,KAAK,CAACa,YAAD,CAAL,CACKO,IADL,CACU,UAAAC,QAAQ,EAAI;AAChBC,QAAAA,YAAY,CAACC,OAAb,CAAqBtB,YAArB,EAAmCoB,QAAQ,CAACG,WAA5C;AACAV,QAAAA,KAAK,CAACW,IAAN,CAAW;AACTC,UAAAA,IAAI,EAAE,SADG;AAETC,UAAAA,KAAK,EAAE;AAFE,SAAX,EAFgB,CAMhB;;AACA,cAAKhB,KAAL,CAAWiB,OAAX,CAAmBC,IAAnB,CAAwB,mBAAxB;AACD,OATL,EASOC,KATP,CASa,UAAAC,KAAK,EAAI;AACpB,YAAGA,KAAK,CAACC,MAAN,KAAiB,GAApB,EAAyB;AACvBlB,UAAAA,KAAK,CAACW,IAAN,CAAW;AACTC,YAAAA,IAAI,EAAE,OADG;AAETC,YAAAA,KAAK,EAAE;AAFE,WAAX;AAID,SALD,MAKO;AACL,gBAAKM,QAAL,CAAc;AACZC,YAAAA,eAAe,EAAE;AADL,WAAd;;AAGA,gBAAKvB,KAAL,CAAWiB,OAAX,CAAmBC,IAAnB,CAAwB,mBAAxB;;AACAf,UAAAA,KAAK,CAACW,IAAN,CAAW;AACTC,YAAAA,IAAI,EAAE,SADG;AAETC,YAAAA,KAAK,EAAE;AAFE,WAAX;AAID;AACF,OAzBD;AA0BD,KA9EkB;;AAAA,UAkFnBQ,YAlFmB,GAkFJ,YAAK;AAClBb,MAAAA,YAAY,CAACc,UAAb,CAAwBnC,YAAxB;;AAEA,YAAKgC,QAAL,CAAc;AACZI,QAAAA,WAAW,EAAE,IADD;AAEZH,QAAAA,eAAe,EAAE;AAFL,OAAd;;AAIA,UAAMpB,KAAK,GAAGL,MAAM,CAACM,KAAP,CAAa;AACzBC,QAAAA,KAAK,EAAE,IADkB;AAEzBC,QAAAA,QAAQ,EAAE,SAFe;AAGzBC,QAAAA,iBAAiB,EAAE,KAHM;AAIzBC,QAAAA,KAAK,EAAE;AAJkB,OAAb,CAAd;AAMAL,MAAAA,KAAK,CAACW,IAAN,CAAW;AACTC,QAAAA,IAAI,EAAE,SADG;AAETC,QAAAA,KAAK,EAAE;AAFE,OAAX;;AAIA,YAAKhB,KAAL,CAAWiB,OAAX,CAAmBC,IAAnB,CAAwB,QAAxB;AACD,KApGkB;;AAEjB,UAAKS,KAAL,GAAa;AACXD,MAAAA,WAAW,EAAE,IADF;AAEXH,MAAAA,eAAe,EAAE,IAFN;AAEW;AACtBK,MAAAA,SAAS,EAAE;AAHA,KAAb;AAKA,UAAKJ,YAAL,GAAoB,MAAKA,YAAL,CAAkBK,IAAlB,uDAApB,CAPiB,CAQjB;;AACA,UAAK5B,WAAL,GAAmB,MAAKA,WAAL,CAAiB4B,IAAjB,uDAAnB;AATiB;AAUlB;AAED;;;;;AAMA;;;;;;;;;;;;;;;;;;;AAmBA;;;;;;;6BAiES;AACP;;;AAGA,aACI,0CACI,oBAAC,MAAD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,SACE,oBAAC,KAAD;AAAO,QAAA,IAAI,EAAC,QAAZ;AACO,QAAA,MAAM,EAAE,gBAAC7B,KAAD;AAAA,iBAAW,oBAAC;AAAM;AAAP,8BAA8CA,KAA9C;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,aAAX;AAAA,SADf;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,QADF,EAGE,oBAAC,YAAD;AAAc,QAAA,IAAI,EAAC,OAAnB;AAA2B,QAAA,SAAS,EAAET,SAAtC;AAAiD,QAAA,YAAY,EAAE,KAAKiC,YAApE;AAAkF,QAAA,OAAO,EAAE,KAAKxB,KAAL,CAAWiB,OAAtG;AAA+G,QAAA,WAAW,EAAE,KAAKU,KAAL,CAAWD,WAAvI;AAAoJ,QAAA,eAAe,EAAE,KAAKC,KAAL,CAAWJ,eAAhL;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,QAHF,EAIE,oBAAC,QAAD;AAAU,QAAA,KAAK,MAAf;AAAgB,QAAA,IAAI,EAAC,GAArB;AAAyB,QAAA,EAAE,EAAC,QAA5B;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,QAJF,EAKE,oBAAC,KAAD;AAAO,QAAA,SAAS,EAAE9B,QAAlB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,QALF,CADJ,CADJ;AAWD;;;;EAtHeV,S;;AAyHlB,eAAeE,UAAU,CAACc,GAAD,CAAzB","sourcesContent":["import React, { Component } from 'react';\n\nimport {\n  Route,\n  withRouter,\n  Switch,\n  Redirect\n} from 'react-router-dom';\n\nimport { getCurrentUser,login } from '../util/APIUtils';\nimport { ACCESS_TOKEN } from '../variables/constants';\n\nimport Dashboard from '../views/User/Dashboard/Dashboard.jsx';\nimport Login from '../views/Login';\nimport NotFound from '../views/NotFound';\nimport LoadingIndicator from '../components/LoadingIndicator/LoadingIndicator';\nimport PrivateRoute from './PrivateRoute';\n\n// Sweet alert\nimport Swal from \"sweetalert2\";\nimport withReactContent from \"sweetalert2-react-content\";\nconst MySwal = withReactContent(Swal);\n\nclass App extends Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      currentUser: null,\n      isAuthenticated: true,//false,\n      isLoading: true\n    };\n    this.handleLogout = this.handleLogout.bind(this);\n    //this.loadCurrentUser = this.loadCurrentUser.bind(this);\n    this.handleLogin = this.handleLogin.bind(this);\n  }\n\n  /*componentWillMount(){\n    this.loadCurrentUser();\n    alert(this.state.isAuthenticated);\n  }*/\n\n\n  /*loadCurrentUser() {\n    this.setState({\n      isLoading: true\n    });\n    getCurrentUser()\n    .then(response => {\n      this.setState({\n        currentUser: response,\n        isAuthenticated: true,\n        isLoading: false\n      });\n      //alert(this.state.isAuthenticated);\n    }).catch(error => {\n      this.setState({\n        isLoading: false\n      });  \n    });\n  }*/\n\n  /*componentDidMount() {\n    this.loadCurrentUser();\n  }*/\n\n\n  handleLogin = (loginRequest) => {\n\n    //let loginRequest=null;\n\n    const Toast = MySwal.mixin({\n      toast: true,\n      position: 'top-end',\n      showConfirmButton: false,\n      timer: 2000\n    });\n    login(loginRequest)\n        .then(response => {\n          localStorage.setItem(ACCESS_TOKEN, response.accessToken);\n          Toast.fire({\n            type: 'success',\n            title: 'Vous êtes connecté avec succès.'\n          });\n          //this.loadCurrentUser();\n          this.props.history.push(\"/user/addtransfer\");\n        }).catch(error => {\n      if(error.status === 401) {\n        Toast.fire({\n          type: 'error',\n          title: 'Votre nom d\\'utilisateur ou votre mot de passe est incorrect. Veuillez réessayer!'\n        });\n      } else {\n        this.setState({\n          isAuthenticated: true\n        });\n        this.props.history.push(\"/user/addtransfer\");\n        Toast.fire({\n          type: 'warning',\n          title: 'Pardon! Quelque chose s\\'est mal passé. Veuillez réessayer!'\n        });\n      }\n    });\n  };\n\n\n\n  handleLogout = ()=> {\n    localStorage.removeItem(ACCESS_TOKEN);\n\n    this.setState({\n      currentUser: null,\n      isAuthenticated: false\n    });\n    const Toast = MySwal.mixin({\n      toast: true,\n      position: 'top-end',\n      showConfirmButton: false,\n      timer: 2000\n    });\n    Toast.fire({\n      type: 'success',\n      title: 'Vous êtes déconnecté avec succès.'\n    });\n    this.props.history.push('/login');\n  };\n\n  render() {\n    /*if(this.state.isLoading) {\n      return <LoadingIndicator />\n    }*/\n    return (\n        <>\n            <Switch>\n              <Route path=\"/login\"\n                     render={(props) => <Login /*handleLogin={this.handleLogin}*/ {...props} />} />\n              <PrivateRoute path=\"/user\" component={Dashboard} handleLogout={this.handleLogout} history={this.props.history} currentUser={this.state.currentUser} isAuthenticated={this.state.isAuthenticated}/>\n              <Redirect exact from=\"/\" to=\"/login\" />\n              <Route component={NotFound} />\n            </Switch>\n        </>\n    );\n  }\n}\n\nexport default withRouter(App);\n"]},"metadata":{},"sourceType":"module"}